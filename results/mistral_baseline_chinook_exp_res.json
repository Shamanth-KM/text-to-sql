[
    {
        "db_id": "chinook",
        "natural_language_question": "Which artists have more than 10 albums?",
        "gold_sql": "SELECT ArtistId FROM Album GROUP BY ArtistId HAVING COUNT(AlbumId) > 10;",
        "raw_model_output": "Database Schema ['CREATE TABLE [Album]\\r\\n(\\r\\n    [AlbumId] INTEGER  NOT NULL,\\r\\n    [Title] NVARCHAR(160)  NOT NULL,\\r\\n    [ArtistId] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_Album] PRIMARY KEY  ([AlbumId]),\\r\\n    FOREIGN KEY ([ArtistId]) REFERENCES [Artist] ([ArtistId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Artist]\\r\\n(\\r\\n    [ArtistId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Artist] PRIMARY KEY  ([ArtistId])\\r\\n)', 'CREATE TABLE [Customer]\\r\\n(\\r\\n    [CustomerId] INTEGER  NOT NULL,\\r\\n    [FirstName] NVARCHAR(40)  NOT NULL,\\r\\n    [LastName] NVARCHAR(20)  NOT NULL,\\r\\n    [Company] NVARCHAR(80),\\r\\n    [Address] NVARCHAR(70),\\r\\n    [City] NVARCHAR(40),\\r\\n    [State] NVARCHAR(40),\\r\\n    [Country] NVARCHAR(40),\\r\\n    [PostalCode] NVARCHAR(10),\\r\\n    [Phone] NVARCHAR(24),\\r\\n    [Fax] NVARCHAR(24),\\r\\n    [Email] NVARCHAR(60)  NOT NULL,\\r\\n    [SupportRepId] INTEGER,\\r\\n    CONSTRAINT [PK_Customer] PRIMARY KEY  ([CustomerId]),\\r\\n    FOREIGN KEY ([SupportRepId]) REFERENCES [Employee] ([EmployeeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Employee]\\r\\n(\\r\\n    [EmployeeId] INTEGER  NOT NULL,\\r\\n    [LastName] NVARCHAR(20)  NOT NULL,\\r\\n    [FirstName] NVARCHAR(20)  NOT NULL,\\r\\n    [Title] NVARCHAR(30),\\r\\n    [ReportsTo] INTEGER,\\r\\n    [BirthDate] DATETIME,\\r\\n    [HireDate] DATETIME,\\r\\n    [Address] NVARCHAR(70),\\r\\n    [City] NVARCHAR(40),\\r\\n    [State] NVARCHAR(40),\\r\\n    [Country] NVARCHAR(40),\\r\\n    [PostalCode] NVARCHAR(10),\\r\\n    [Phone] NVARCHAR(24),\\r\\n    [Fax] NVARCHAR(24),\\r\\n    [Email] NVARCHAR(60),\\r\\n    CONSTRAINT [PK_Employee] PRIMARY KEY  ([EmployeeId]),\\r\\n    FOREIGN KEY ([ReportsTo]) REFERENCES [Employee] ([EmployeeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Genre]\\r\\n(\\r\\n    [GenreId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Genre] PRIMARY KEY  ([GenreId])\\r\\n)', 'CREATE TABLE [Invoice]\\r\\n(\\r\\n    [InvoiceId] INTEGER  NOT NULL,\\r\\n    [CustomerId] INTEGER  NOT NULL,\\r\\n    [InvoiceDate] DATETIME  NOT NULL,\\r\\n    [BillingAddress] NVARCHAR(70),\\r\\n    [BillingCity] NVARCHAR(40),\\r\\n    [BillingState] NVARCHAR(40),\\r\\n    [BillingCountry] NVARCHAR(40),\\r\\n    [BillingPostalCode] NVARCHAR(10),\\r\\n    [Total] NUMERIC(10,2)  NOT NULL,\\r\\n    CONSTRAINT [PK_Invoice] PRIMARY KEY  ([InvoiceId]),\\r\\n    FOREIGN KEY ([CustomerId]) REFERENCES [Customer] ([CustomerId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [InvoiceLine]\\r\\n(\\r\\n    [InvoiceLineId] INTEGER  NOT NULL,\\r\\n    [InvoiceId] INTEGER  NOT NULL,\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    [UnitPrice] NUMERIC(10,2)  NOT NULL,\\r\\n    [Quantity] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_InvoiceLine] PRIMARY KEY  ([InvoiceLineId]),\\r\\n    FOREIGN KEY ([InvoiceId]) REFERENCES [Invoice] ([InvoiceId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [MediaType]\\r\\n(\\r\\n    [MediaTypeId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_MediaType] PRIMARY KEY  ([MediaTypeId])\\r\\n)', 'CREATE TABLE [Playlist]\\r\\n(\\r\\n    [PlaylistId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Playlist] PRIMARY KEY  ([PlaylistId])\\r\\n)', 'CREATE TABLE [PlaylistTrack]\\r\\n(\\r\\n    [PlaylistId] INTEGER  NOT NULL,\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_PlaylistTrack] PRIMARY KEY  ([PlaylistId], [TrackId]),\\r\\n    FOREIGN KEY ([PlaylistId]) REFERENCES [Playlist] ([PlaylistId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Track]\\r\\n(\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(200)  NOT NULL,\\r\\n    [AlbumId] INTEGER,\\r\\n    [MediaTypeId] INTEGER  NOT NULL,\\r\\n    [GenreId] INTEGER,\\r\\n    [Composer] NVARCHAR(220),\\r\\n    [Milliseconds] INTEGER  NOT NULL,\\r\\n    [Bytes] INTEGER,\\r\\n    [UnitPrice] NUMERIC(10,2)  NOT NULL,\\r\\n    CONSTRAINT [PK_Track] PRIMARY KEY  ([TrackId]),\\r\\n    FOREIGN KEY ([AlbumId]) REFERENCES [Album] ([AlbumId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([GenreId]) REFERENCES [Genre] ([GenreId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([MediaTypeId]) REFERENCES [MediaType] ([MediaTypeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)'], Based on the provided database schema information, Which artists have more than 10 albums?\n ### SQL:\n ```sql\n SELECT a.Name\n FROM Artist AS a\n JOIN Album AS al ON a.ArtistId = al.ArtistId\n GROUP BY a.Name\n HAVING COUNT(*) > 10\n```\nThis SQL query will return the names of artists who have more than 10 albums in the database. The query uses a join to combine the Artist and Album tables based on their common ArtistId field, and then groups the results by artist name using the GROUP BY clause. The HAVING clause is used to filter the results to only include artists with more than 10 albums.",
        "clean_sql_extracted": "SELECT a.Name FROM Artist AS a JOIN Album AS al ON a.ArtistId = al.ArtistId GROUP BY a.Name HAVING COUNT(*) > 10"
    },
    {
        "db_id": "chinook",
        "natural_language_question": "List the first and last names of customers who live in Brazil.",
        "gold_sql": "SELECT FirstName, LastName FROM Customer WHERE Country = 'Brazil';",
        "raw_model_output": "Database Schema ['CREATE TABLE [Album]\\r\\n(\\r\\n    [AlbumId] INTEGER  NOT NULL,\\r\\n    [Title] NVARCHAR(160)  NOT NULL,\\r\\n    [ArtistId] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_Album] PRIMARY KEY  ([AlbumId]),\\r\\n    FOREIGN KEY ([ArtistId]) REFERENCES [Artist] ([ArtistId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Artist]\\r\\n(\\r\\n    [ArtistId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Artist] PRIMARY KEY  ([ArtistId])\\r\\n)', 'CREATE TABLE [Customer]\\r\\n(\\r\\n    [CustomerId] INTEGER  NOT NULL,\\r\\n    [FirstName] NVARCHAR(40)  NOT NULL,\\r\\n    [LastName] NVARCHAR(20)  NOT NULL,\\r\\n    [Company] NVARCHAR(80),\\r\\n    [Address] NVARCHAR(70),\\r\\n    [City] NVARCHAR(40),\\r\\n    [State] NVARCHAR(40),\\r\\n    [Country] NVARCHAR(40),\\r\\n    [PostalCode] NVARCHAR(10),\\r\\n    [Phone] NVARCHAR(24),\\r\\n    [Fax] NVARCHAR(24),\\r\\n    [Email] NVARCHAR(60)  NOT NULL,\\r\\n    [SupportRepId] INTEGER,\\r\\n    CONSTRAINT [PK_Customer] PRIMARY KEY  ([CustomerId]),\\r\\n    FOREIGN KEY ([SupportRepId]) REFERENCES [Employee] ([EmployeeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Employee]\\r\\n(\\r\\n    [EmployeeId] INTEGER  NOT NULL,\\r\\n    [LastName] NVARCHAR(20)  NOT NULL,\\r\\n    [FirstName] NVARCHAR(20)  NOT NULL,\\r\\n    [Title] NVARCHAR(30),\\r\\n    [ReportsTo] INTEGER,\\r\\n    [BirthDate] DATETIME,\\r\\n    [HireDate] DATETIME,\\r\\n    [Address] NVARCHAR(70),\\r\\n    [City] NVARCHAR(40),\\r\\n    [State] NVARCHAR(40),\\r\\n    [Country] NVARCHAR(40),\\r\\n    [PostalCode] NVARCHAR(10),\\r\\n    [Phone] NVARCHAR(24),\\r\\n    [Fax] NVARCHAR(24),\\r\\n    [Email] NVARCHAR(60),\\r\\n    CONSTRAINT [PK_Employee] PRIMARY KEY  ([EmployeeId]),\\r\\n    FOREIGN KEY ([ReportsTo]) REFERENCES [Employee] ([EmployeeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Genre]\\r\\n(\\r\\n    [GenreId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Genre] PRIMARY KEY  ([GenreId])\\r\\n)', 'CREATE TABLE [Invoice]\\r\\n(\\r\\n    [InvoiceId] INTEGER  NOT NULL,\\r\\n    [CustomerId] INTEGER  NOT NULL,\\r\\n    [InvoiceDate] DATETIME  NOT NULL,\\r\\n    [BillingAddress] NVARCHAR(70),\\r\\n    [BillingCity] NVARCHAR(40),\\r\\n    [BillingState] NVARCHAR(40),\\r\\n    [BillingCountry] NVARCHAR(40),\\r\\n    [BillingPostalCode] NVARCHAR(10),\\r\\n    [Total] NUMERIC(10,2)  NOT NULL,\\r\\n    CONSTRAINT [PK_Invoice] PRIMARY KEY  ([InvoiceId]),\\r\\n    FOREIGN KEY ([CustomerId]) REFERENCES [Customer] ([CustomerId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [InvoiceLine]\\r\\n(\\r\\n    [InvoiceLineId] INTEGER  NOT NULL,\\r\\n    [InvoiceId] INTEGER  NOT NULL,\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    [UnitPrice] NUMERIC(10,2)  NOT NULL,\\r\\n    [Quantity] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_InvoiceLine] PRIMARY KEY  ([InvoiceLineId]),\\r\\n    FOREIGN KEY ([InvoiceId]) REFERENCES [Invoice] ([InvoiceId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [MediaType]\\r\\n(\\r\\n    [MediaTypeId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_MediaType] PRIMARY KEY  ([MediaTypeId])\\r\\n)', 'CREATE TABLE [Playlist]\\r\\n(\\r\\n    [PlaylistId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Playlist] PRIMARY KEY  ([PlaylistId])\\r\\n)', 'CREATE TABLE [PlaylistTrack]\\r\\n(\\r\\n    [PlaylistId] INTEGER  NOT NULL,\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_PlaylistTrack] PRIMARY KEY  ([PlaylistId], [TrackId]),\\r\\n    FOREIGN KEY ([PlaylistId]) REFERENCES [Playlist] ([PlaylistId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Track]\\r\\n(\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(200)  NOT NULL,\\r\\n    [AlbumId] INTEGER,\\r\\n    [MediaTypeId] INTEGER  NOT NULL,\\r\\n    [GenreId] INTEGER,\\r\\n    [Composer] NVARCHAR(220),\\r\\n    [Milliseconds] INTEGER  NOT NULL,\\r\\n    [Bytes] INTEGER,\\r\\n    [UnitPrice] NUMERIC(10,2)  NOT NULL,\\r\\n    CONSTRAINT [PK_Track] PRIMARY KEY  ([TrackId]),\\r\\n    FOREIGN KEY ([AlbumId]) REFERENCES [Album] ([AlbumId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([GenreId]) REFERENCES [Genre] ([GenreId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([MediaTypeId]) REFERENCES [MediaType] ([MediaTypeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)'], Based on the provided database schema information, List the first and last names of customers who live in Brazil.\n ### SQL:\n ```sql\n SELECT FirstName, LastName\n FROM Customer\n WHERE Country = 'Brazil';\n```\nThis query will return the first and last names of all customers who live in Brazil.",
        "clean_sql_extracted": "SELECT FirstName, LastName FROM Customer WHERE Country = 'Brazil';"
    },
    {
        "db_id": "chinook",
        "natural_language_question": "Show all tracks that are longer than 5 minutes.",
        "gold_sql": "SELECT Name FROM Track WHERE Milliseconds > 300000;",
        "raw_model_output": "Database Schema ['CREATE TABLE [Album]\\r\\n(\\r\\n    [AlbumId] INTEGER  NOT NULL,\\r\\n    [Title] NVARCHAR(160)  NOT NULL,\\r\\n    [ArtistId] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_Album] PRIMARY KEY  ([AlbumId]),\\r\\n    FOREIGN KEY ([ArtistId]) REFERENCES [Artist] ([ArtistId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Artist]\\r\\n(\\r\\n    [ArtistId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Artist] PRIMARY KEY  ([ArtistId])\\r\\n)', 'CREATE TABLE [Customer]\\r\\n(\\r\\n    [CustomerId] INTEGER  NOT NULL,\\r\\n    [FirstName] NVARCHAR(40)  NOT NULL,\\r\\n    [LastName] NVARCHAR(20)  NOT NULL,\\r\\n    [Company] NVARCHAR(80),\\r\\n    [Address] NVARCHAR(70),\\r\\n    [City] NVARCHAR(40),\\r\\n    [State] NVARCHAR(40),\\r\\n    [Country] NVARCHAR(40),\\r\\n    [PostalCode] NVARCHAR(10),\\r\\n    [Phone] NVARCHAR(24),\\r\\n    [Fax] NVARCHAR(24),\\r\\n    [Email] NVARCHAR(60)  NOT NULL,\\r\\n    [SupportRepId] INTEGER,\\r\\n    CONSTRAINT [PK_Customer] PRIMARY KEY  ([CustomerId]),\\r\\n    FOREIGN KEY ([SupportRepId]) REFERENCES [Employee] ([EmployeeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Employee]\\r\\n(\\r\\n    [EmployeeId] INTEGER  NOT NULL,\\r\\n    [LastName] NVARCHAR(20)  NOT NULL,\\r\\n    [FirstName] NVARCHAR(20)  NOT NULL,\\r\\n    [Title] NVARCHAR(30),\\r\\n    [ReportsTo] INTEGER,\\r\\n    [BirthDate] DATETIME,\\r\\n    [HireDate] DATETIME,\\r\\n    [Address] NVARCHAR(70),\\r\\n    [City] NVARCHAR(40),\\r\\n    [State] NVARCHAR(40),\\r\\n    [Country] NVARCHAR(40),\\r\\n    [PostalCode] NVARCHAR(10),\\r\\n    [Phone] NVARCHAR(24),\\r\\n    [Fax] NVARCHAR(24),\\r\\n    [Email] NVARCHAR(60),\\r\\n    CONSTRAINT [PK_Employee] PRIMARY KEY  ([EmployeeId]),\\r\\n    FOREIGN KEY ([ReportsTo]) REFERENCES [Employee] ([EmployeeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Genre]\\r\\n(\\r\\n    [GenreId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Genre] PRIMARY KEY  ([GenreId])\\r\\n)', 'CREATE TABLE [Invoice]\\r\\n(\\r\\n    [InvoiceId] INTEGER  NOT NULL,\\r\\n    [CustomerId] INTEGER  NOT NULL,\\r\\n    [InvoiceDate] DATETIME  NOT NULL,\\r\\n    [BillingAddress] NVARCHAR(70),\\r\\n    [BillingCity] NVARCHAR(40),\\r\\n    [BillingState] NVARCHAR(40),\\r\\n    [BillingCountry] NVARCHAR(40),\\r\\n    [BillingPostalCode] NVARCHAR(10),\\r\\n    [Total] NUMERIC(10,2)  NOT NULL,\\r\\n    CONSTRAINT [PK_Invoice] PRIMARY KEY  ([InvoiceId]),\\r\\n    FOREIGN KEY ([CustomerId]) REFERENCES [Customer] ([CustomerId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [InvoiceLine]\\r\\n(\\r\\n    [InvoiceLineId] INTEGER  NOT NULL,\\r\\n    [InvoiceId] INTEGER  NOT NULL,\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    [UnitPrice] NUMERIC(10,2)  NOT NULL,\\r\\n    [Quantity] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_InvoiceLine] PRIMARY KEY  ([InvoiceLineId]),\\r\\n    FOREIGN KEY ([InvoiceId]) REFERENCES [Invoice] ([InvoiceId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [MediaType]\\r\\n(\\r\\n    [MediaTypeId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_MediaType] PRIMARY KEY  ([MediaTypeId])\\r\\n)', 'CREATE TABLE [Playlist]\\r\\n(\\r\\n    [PlaylistId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Playlist] PRIMARY KEY  ([PlaylistId])\\r\\n)', 'CREATE TABLE [PlaylistTrack]\\r\\n(\\r\\n    [PlaylistId] INTEGER  NOT NULL,\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_PlaylistTrack] PRIMARY KEY  ([PlaylistId], [TrackId]),\\r\\n    FOREIGN KEY ([PlaylistId]) REFERENCES [Playlist] ([PlaylistId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Track]\\r\\n(\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(200)  NOT NULL,\\r\\n    [AlbumId] INTEGER,\\r\\n    [MediaTypeId] INTEGER  NOT NULL,\\r\\n    [GenreId] INTEGER,\\r\\n    [Composer] NVARCHAR(220),\\r\\n    [Milliseconds] INTEGER  NOT NULL,\\r\\n    [Bytes] INTEGER,\\r\\n    [UnitPrice] NUMERIC(10,2)  NOT NULL,\\r\\n    CONSTRAINT [PK_Track] PRIMARY KEY  ([TrackId]),\\r\\n    FOREIGN KEY ([AlbumId]) REFERENCES [Album] ([AlbumId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([GenreId]) REFERENCES [Genre] ([GenreId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([MediaTypeId]) REFERENCES [MediaType] ([MediaTypeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)'], Based on the provided database schema information, Show all tracks that are longer than 5 minutes.\n ### SQL:\n ```sql\n SELECT Name FROM Track\n WHERE Milliseconds > 5 * 60 * 1000\n```\nThis query will return the names of all tracks that have a duration longer than 5 minutes (5 minutes = 5 * 60 seconds = 5 * 60 * 1000 milliseconds).",
        "clean_sql_extracted": "SELECT Name FROM Track WHERE Milliseconds > 5 * 60 * 1000"
    },
    {
        "db_id": "chinook",
        "natural_language_question": "Which employees are sales managers?",
        "gold_sql": "SELECT FirstName, LastName FROM Employee WHERE Title = 'Sales Manager';",
        "raw_model_output": "Database Schema ['CREATE TABLE [Album]\\r\\n(\\r\\n    [AlbumId] INTEGER  NOT NULL,\\r\\n    [Title] NVARCHAR(160)  NOT NULL,\\r\\n    [ArtistId] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_Album] PRIMARY KEY  ([AlbumId]),\\r\\n    FOREIGN KEY ([ArtistId]) REFERENCES [Artist] ([ArtistId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Artist]\\r\\n(\\r\\n    [ArtistId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Artist] PRIMARY KEY  ([ArtistId])\\r\\n)', 'CREATE TABLE [Customer]\\r\\n(\\r\\n    [CustomerId] INTEGER  NOT NULL,\\r\\n    [FirstName] NVARCHAR(40)  NOT NULL,\\r\\n    [LastName] NVARCHAR(20)  NOT NULL,\\r\\n    [Company] NVARCHAR(80),\\r\\n    [Address] NVARCHAR(70),\\r\\n    [City] NVARCHAR(40),\\r\\n    [State] NVARCHAR(40),\\r\\n    [Country] NVARCHAR(40),\\r\\n    [PostalCode] NVARCHAR(10),\\r\\n    [Phone] NVARCHAR(24),\\r\\n    [Fax] NVARCHAR(24),\\r\\n    [Email] NVARCHAR(60)  NOT NULL,\\r\\n    [SupportRepId] INTEGER,\\r\\n    CONSTRAINT [PK_Customer] PRIMARY KEY  ([CustomerId]),\\r\\n    FOREIGN KEY ([SupportRepId]) REFERENCES [Employee] ([EmployeeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Employee]\\r\\n(\\r\\n    [EmployeeId] INTEGER  NOT NULL,\\r\\n    [LastName] NVARCHAR(20)  NOT NULL,\\r\\n    [FirstName] NVARCHAR(20)  NOT NULL,\\r\\n    [Title] NVARCHAR(30),\\r\\n    [ReportsTo] INTEGER,\\r\\n    [BirthDate] DATETIME,\\r\\n    [HireDate] DATETIME,\\r\\n    [Address] NVARCHAR(70),\\r\\n    [City] NVARCHAR(40),\\r\\n    [State] NVARCHAR(40),\\r\\n    [Country] NVARCHAR(40),\\r\\n    [PostalCode] NVARCHAR(10),\\r\\n    [Phone] NVARCHAR(24),\\r\\n    [Fax] NVARCHAR(24),\\r\\n    [Email] NVARCHAR(60),\\r\\n    CONSTRAINT [PK_Employee] PRIMARY KEY  ([EmployeeId]),\\r\\n    FOREIGN KEY ([ReportsTo]) REFERENCES [Employee] ([EmployeeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Genre]\\r\\n(\\r\\n    [GenreId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Genre] PRIMARY KEY  ([GenreId])\\r\\n)', 'CREATE TABLE [Invoice]\\r\\n(\\r\\n    [InvoiceId] INTEGER  NOT NULL,\\r\\n    [CustomerId] INTEGER  NOT NULL,\\r\\n    [InvoiceDate] DATETIME  NOT NULL,\\r\\n    [BillingAddress] NVARCHAR(70),\\r\\n    [BillingCity] NVARCHAR(40),\\r\\n    [BillingState] NVARCHAR(40),\\r\\n    [BillingCountry] NVARCHAR(40),\\r\\n    [BillingPostalCode] NVARCHAR(10),\\r\\n    [Total] NUMERIC(10,2)  NOT NULL,\\r\\n    CONSTRAINT [PK_Invoice] PRIMARY KEY  ([InvoiceId]),\\r\\n    FOREIGN KEY ([CustomerId]) REFERENCES [Customer] ([CustomerId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [InvoiceLine]\\r\\n(\\r\\n    [InvoiceLineId] INTEGER  NOT NULL,\\r\\n    [InvoiceId] INTEGER  NOT NULL,\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    [UnitPrice] NUMERIC(10,2)  NOT NULL,\\r\\n    [Quantity] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_InvoiceLine] PRIMARY KEY  ([InvoiceLineId]),\\r\\n    FOREIGN KEY ([InvoiceId]) REFERENCES [Invoice] ([InvoiceId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [MediaType]\\r\\n(\\r\\n    [MediaTypeId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_MediaType] PRIMARY KEY  ([MediaTypeId])\\r\\n)', 'CREATE TABLE [Playlist]\\r\\n(\\r\\n    [PlaylistId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Playlist] PRIMARY KEY  ([PlaylistId])\\r\\n)', 'CREATE TABLE [PlaylistTrack]\\r\\n(\\r\\n    [PlaylistId] INTEGER  NOT NULL,\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_PlaylistTrack] PRIMARY KEY  ([PlaylistId], [TrackId]),\\r\\n    FOREIGN KEY ([PlaylistId]) REFERENCES [Playlist] ([PlaylistId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Track]\\r\\n(\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(200)  NOT NULL,\\r\\n    [AlbumId] INTEGER,\\r\\n    [MediaTypeId] INTEGER  NOT NULL,\\r\\n    [GenreId] INTEGER,\\r\\n    [Composer] NVARCHAR(220),\\r\\n    [Milliseconds] INTEGER  NOT NULL,\\r\\n    [Bytes] INTEGER,\\r\\n    [UnitPrice] NUMERIC(10,2)  NOT NULL,\\r\\n    CONSTRAINT [PK_Track] PRIMARY KEY  ([TrackId]),\\r\\n    FOREIGN KEY ([AlbumId]) REFERENCES [Album] ([AlbumId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([GenreId]) REFERENCES [Genre] ([GenreId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([MediaTypeId]) REFERENCES [MediaType] ([MediaTypeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)'], Based on the provided database schema information, Which employees are sales managers?\n ### SQL:\n To find the sales managers in the given database schema, we need to look for employees who have a title 'Sales Manager'. We can use the following SQL query to retrieve the required information:\n\n```sql\nSELECT e.LastName, e.FirstName\nFROM Employee e\nWHERE e.Title = 'Sales Manager';\n```\n\nThis query will return the last name and first name of all employees who have the title 'Sales Manager'.",
        "clean_sql_extracted": "SELECT e.LastName, e.FirstName FROM Employee e WHERE e.Title = 'Sales Manager';"
    },
    {
        "db_id": "chinook",
        "natural_language_question": "Get the email addresses of customers in the city of Paris.",
        "gold_sql": "SELECT Email FROM Customer WHERE City = 'Paris';",
        "raw_model_output": "Database Schema ['CREATE TABLE [Album]\\r\\n(\\r\\n    [AlbumId] INTEGER  NOT NULL,\\r\\n    [Title] NVARCHAR(160)  NOT NULL,\\r\\n    [ArtistId] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_Album] PRIMARY KEY  ([AlbumId]),\\r\\n    FOREIGN KEY ([ArtistId]) REFERENCES [Artist] ([ArtistId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Artist]\\r\\n(\\r\\n    [ArtistId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Artist] PRIMARY KEY  ([ArtistId])\\r\\n)', 'CREATE TABLE [Customer]\\r\\n(\\r\\n    [CustomerId] INTEGER  NOT NULL,\\r\\n    [FirstName] NVARCHAR(40)  NOT NULL,\\r\\n    [LastName] NVARCHAR(20)  NOT NULL,\\r\\n    [Company] NVARCHAR(80),\\r\\n    [Address] NVARCHAR(70),\\r\\n    [City] NVARCHAR(40),\\r\\n    [State] NVARCHAR(40),\\r\\n    [Country] NVARCHAR(40),\\r\\n    [PostalCode] NVARCHAR(10),\\r\\n    [Phone] NVARCHAR(24),\\r\\n    [Fax] NVARCHAR(24),\\r\\n    [Email] NVARCHAR(60)  NOT NULL,\\r\\n    [SupportRepId] INTEGER,\\r\\n    CONSTRAINT [PK_Customer] PRIMARY KEY  ([CustomerId]),\\r\\n    FOREIGN KEY ([SupportRepId]) REFERENCES [Employee] ([EmployeeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Employee]\\r\\n(\\r\\n    [EmployeeId] INTEGER  NOT NULL,\\r\\n    [LastName] NVARCHAR(20)  NOT NULL,\\r\\n    [FirstName] NVARCHAR(20)  NOT NULL,\\r\\n    [Title] NVARCHAR(30),\\r\\n    [ReportsTo] INTEGER,\\r\\n    [BirthDate] DATETIME,\\r\\n    [HireDate] DATETIME,\\r\\n    [Address] NVARCHAR(70),\\r\\n    [City] NVARCHAR(40),\\r\\n    [State] NVARCHAR(40),\\r\\n    [Country] NVARCHAR(40),\\r\\n    [PostalCode] NVARCHAR(10),\\r\\n    [Phone] NVARCHAR(24),\\r\\n    [Fax] NVARCHAR(24),\\r\\n    [Email] NVARCHAR(60),\\r\\n    CONSTRAINT [PK_Employee] PRIMARY KEY  ([EmployeeId]),\\r\\n    FOREIGN KEY ([ReportsTo]) REFERENCES [Employee] ([EmployeeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Genre]\\r\\n(\\r\\n    [GenreId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Genre] PRIMARY KEY  ([GenreId])\\r\\n)', 'CREATE TABLE [Invoice]\\r\\n(\\r\\n    [InvoiceId] INTEGER  NOT NULL,\\r\\n    [CustomerId] INTEGER  NOT NULL,\\r\\n    [InvoiceDate] DATETIME  NOT NULL,\\r\\n    [BillingAddress] NVARCHAR(70),\\r\\n    [BillingCity] NVARCHAR(40),\\r\\n    [BillingState] NVARCHAR(40),\\r\\n    [BillingCountry] NVARCHAR(40),\\r\\n    [BillingPostalCode] NVARCHAR(10),\\r\\n    [Total] NUMERIC(10,2)  NOT NULL,\\r\\n    CONSTRAINT [PK_Invoice] PRIMARY KEY  ([InvoiceId]),\\r\\n    FOREIGN KEY ([CustomerId]) REFERENCES [Customer] ([CustomerId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [InvoiceLine]\\r\\n(\\r\\n    [InvoiceLineId] INTEGER  NOT NULL,\\r\\n    [InvoiceId] INTEGER  NOT NULL,\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    [UnitPrice] NUMERIC(10,2)  NOT NULL,\\r\\n    [Quantity] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_InvoiceLine] PRIMARY KEY  ([InvoiceLineId]),\\r\\n    FOREIGN KEY ([InvoiceId]) REFERENCES [Invoice] ([InvoiceId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [MediaType]\\r\\n(\\r\\n    [MediaTypeId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_MediaType] PRIMARY KEY  ([MediaTypeId])\\r\\n)', 'CREATE TABLE [Playlist]\\r\\n(\\r\\n    [PlaylistId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Playlist] PRIMARY KEY  ([PlaylistId])\\r\\n)', 'CREATE TABLE [PlaylistTrack]\\r\\n(\\r\\n    [PlaylistId] INTEGER  NOT NULL,\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_PlaylistTrack] PRIMARY KEY  ([PlaylistId], [TrackId]),\\r\\n    FOREIGN KEY ([PlaylistId]) REFERENCES [Playlist] ([PlaylistId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Track]\\r\\n(\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(200)  NOT NULL,\\r\\n    [AlbumId] INTEGER,\\r\\n    [MediaTypeId] INTEGER  NOT NULL,\\r\\n    [GenreId] INTEGER,\\r\\n    [Composer] NVARCHAR(220),\\r\\n    [Milliseconds] INTEGER  NOT NULL,\\r\\n    [Bytes] INTEGER,\\r\\n    [UnitPrice] NUMERIC(10,2)  NOT NULL,\\r\\n    CONSTRAINT [PK_Track] PRIMARY KEY  ([TrackId]),\\r\\n    FOREIGN KEY ([AlbumId]) REFERENCES [Album] ([AlbumId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([GenreId]) REFERENCES [Genre] ([GenreId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([MediaTypeId]) REFERENCES [MediaType] ([MediaTypeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)'], Based on the provided database schema information, Get the email addresses of customers in the city of Paris.\n ### SQL:\n ```sql\n SELECT Email\n FROM Customer\n WHERE City = 'Paris'\n```\nThis SQL query will return the email addresses of all customers who have the city 'Paris' in their record.",
        "clean_sql_extracted": "SELECT Email FROM Customer WHERE City = 'Paris'"
    },
    {
        "db_id": "chinook",
        "natural_language_question": "Find the total amount spent by each customer.",
        "gold_sql": "SELECT CustomerId, SUM(Total) FROM Invoice GROUP BY CustomerId;",
        "raw_model_output": "Database Schema ['CREATE TABLE [Album]\\r\\n(\\r\\n    [AlbumId] INTEGER  NOT NULL,\\r\\n    [Title] NVARCHAR(160)  NOT NULL,\\r\\n    [ArtistId] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_Album] PRIMARY KEY  ([AlbumId]),\\r\\n    FOREIGN KEY ([ArtistId]) REFERENCES [Artist] ([ArtistId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Artist]\\r\\n(\\r\\n    [ArtistId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Artist] PRIMARY KEY  ([ArtistId])\\r\\n)', 'CREATE TABLE [Customer]\\r\\n(\\r\\n    [CustomerId] INTEGER  NOT NULL,\\r\\n    [FirstName] NVARCHAR(40)  NOT NULL,\\r\\n    [LastName] NVARCHAR(20)  NOT NULL,\\r\\n    [Company] NVARCHAR(80),\\r\\n    [Address] NVARCHAR(70),\\r\\n    [City] NVARCHAR(40),\\r\\n    [State] NVARCHAR(40),\\r\\n    [Country] NVARCHAR(40),\\r\\n    [PostalCode] NVARCHAR(10),\\r\\n    [Phone] NVARCHAR(24),\\r\\n    [Fax] NVARCHAR(24),\\r\\n    [Email] NVARCHAR(60)  NOT NULL,\\r\\n    [SupportRepId] INTEGER,\\r\\n    CONSTRAINT [PK_Customer] PRIMARY KEY  ([CustomerId]),\\r\\n    FOREIGN KEY ([SupportRepId]) REFERENCES [Employee] ([EmployeeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Employee]\\r\\n(\\r\\n    [EmployeeId] INTEGER  NOT NULL,\\r\\n    [LastName] NVARCHAR(20)  NOT NULL,\\r\\n    [FirstName] NVARCHAR(20)  NOT NULL,\\r\\n    [Title] NVARCHAR(30),\\r\\n    [ReportsTo] INTEGER,\\r\\n    [BirthDate] DATETIME,\\r\\n    [HireDate] DATETIME,\\r\\n    [Address] NVARCHAR(70),\\r\\n    [City] NVARCHAR(40),\\r\\n    [State] NVARCHAR(40),\\r\\n    [Country] NVARCHAR(40),\\r\\n    [PostalCode] NVARCHAR(10),\\r\\n    [Phone] NVARCHAR(24),\\r\\n    [Fax] NVARCHAR(24),\\r\\n    [Email] NVARCHAR(60),\\r\\n    CONSTRAINT [PK_Employee] PRIMARY KEY  ([EmployeeId]),\\r\\n    FOREIGN KEY ([ReportsTo]) REFERENCES [Employee] ([EmployeeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Genre]\\r\\n(\\r\\n    [GenreId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Genre] PRIMARY KEY  ([GenreId])\\r\\n)', 'CREATE TABLE [Invoice]\\r\\n(\\r\\n    [InvoiceId] INTEGER  NOT NULL,\\r\\n    [CustomerId] INTEGER  NOT NULL,\\r\\n    [InvoiceDate] DATETIME  NOT NULL,\\r\\n    [BillingAddress] NVARCHAR(70),\\r\\n    [BillingCity] NVARCHAR(40),\\r\\n    [BillingState] NVARCHAR(40),\\r\\n    [BillingCountry] NVARCHAR(40),\\r\\n    [BillingPostalCode] NVARCHAR(10),\\r\\n    [Total] NUMERIC(10,2)  NOT NULL,\\r\\n    CONSTRAINT [PK_Invoice] PRIMARY KEY  ([InvoiceId]),\\r\\n    FOREIGN KEY ([CustomerId]) REFERENCES [Customer] ([CustomerId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [InvoiceLine]\\r\\n(\\r\\n    [InvoiceLineId] INTEGER  NOT NULL,\\r\\n    [InvoiceId] INTEGER  NOT NULL,\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    [UnitPrice] NUMERIC(10,2)  NOT NULL,\\r\\n    [Quantity] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_InvoiceLine] PRIMARY KEY  ([InvoiceLineId]),\\r\\n    FOREIGN KEY ([InvoiceId]) REFERENCES [Invoice] ([InvoiceId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [MediaType]\\r\\n(\\r\\n    [MediaTypeId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_MediaType] PRIMARY KEY  ([MediaTypeId])\\r\\n)', 'CREATE TABLE [Playlist]\\r\\n(\\r\\n    [PlaylistId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Playlist] PRIMARY KEY  ([PlaylistId])\\r\\n)', 'CREATE TABLE [PlaylistTrack]\\r\\n(\\r\\n    [PlaylistId] INTEGER  NOT NULL,\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_PlaylistTrack] PRIMARY KEY  ([PlaylistId], [TrackId]),\\r\\n    FOREIGN KEY ([PlaylistId]) REFERENCES [Playlist] ([PlaylistId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Track]\\r\\n(\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(200)  NOT NULL,\\r\\n    [AlbumId] INTEGER,\\r\\n    [MediaTypeId] INTEGER  NOT NULL,\\r\\n    [GenreId] INTEGER,\\r\\n    [Composer] NVARCHAR(220),\\r\\n    [Milliseconds] INTEGER  NOT NULL,\\r\\n    [Bytes] INTEGER,\\r\\n    [UnitPrice] NUMERIC(10,2)  NOT NULL,\\r\\n    CONSTRAINT [PK_Track] PRIMARY KEY  ([TrackId]),\\r\\n    FOREIGN KEY ([AlbumId]) REFERENCES [Album] ([AlbumId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([GenreId]) REFERENCES [Genre] ([GenreId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([MediaTypeId]) REFERENCES [MediaType] ([MediaTypeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)'], Based on the provided database schema information, Find the total amount spent by each customer.\n ### SQL:\n ```sql\n SELECT c.CustomerName, SUM(il.UnitPrice * il.Quantity) as TotalSpend\n FROM Customer c\n JOIN Invoice i ON c.CustomerId = i.CustomerId\n JOIN InvoiceLine il ON i.InvoiceId = il.InvoiceId\n GROUP BY c.CustomerId, c.CustomerName\n ORDER BY TotalSpend DESC;\n```\nThis SQL query will return the total amount spent by each customer, along with their name, ordered by the total amount spent in descending order. The query uses a join to combine the Customer, Invoice, and InvoiceLine tables, and then groups the results by the customer's ID and name, calculating the total spend for each group.",
        "clean_sql_extracted": "SELECT c.CustomerName, SUM(il.UnitPrice * il.Quantity) as TotalSpend FROM Customer c JOIN Invoice i ON c.CustomerId = i.CustomerId JOIN InvoiceLine il ON i.InvoiceId = il.InvoiceId GROUP BY c.CustomerId, c.CustomerName ORDER BY TotalSpend DESC;"
    },
    {
        "db_id": "chinook",
        "natural_language_question": "List the top 5 most expensive tracks.",
        "gold_sql": "SELECT Name FROM Track ORDER BY UnitPrice DESC LIMIT 5;",
        "raw_model_output": "Database Schema ['CREATE TABLE [Album]\\r\\n(\\r\\n    [AlbumId] INTEGER  NOT NULL,\\r\\n    [Title] NVARCHAR(160)  NOT NULL,\\r\\n    [ArtistId] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_Album] PRIMARY KEY  ([AlbumId]),\\r\\n    FOREIGN KEY ([ArtistId]) REFERENCES [Artist] ([ArtistId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Artist]\\r\\n(\\r\\n    [ArtistId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Artist] PRIMARY KEY  ([ArtistId])\\r\\n)', 'CREATE TABLE [Customer]\\r\\n(\\r\\n    [CustomerId] INTEGER  NOT NULL,\\r\\n    [FirstName] NVARCHAR(40)  NOT NULL,\\r\\n    [LastName] NVARCHAR(20)  NOT NULL,\\r\\n    [Company] NVARCHAR(80),\\r\\n    [Address] NVARCHAR(70),\\r\\n    [City] NVARCHAR(40),\\r\\n    [State] NVARCHAR(40),\\r\\n    [Country] NVARCHAR(40),\\r\\n    [PostalCode] NVARCHAR(10),\\r\\n    [Phone] NVARCHAR(24),\\r\\n    [Fax] NVARCHAR(24),\\r\\n    [Email] NVARCHAR(60)  NOT NULL,\\r\\n    [SupportRepId] INTEGER,\\r\\n    CONSTRAINT [PK_Customer] PRIMARY KEY  ([CustomerId]),\\r\\n    FOREIGN KEY ([SupportRepId]) REFERENCES [Employee] ([EmployeeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Employee]\\r\\n(\\r\\n    [EmployeeId] INTEGER  NOT NULL,\\r\\n    [LastName] NVARCHAR(20)  NOT NULL,\\r\\n    [FirstName] NVARCHAR(20)  NOT NULL,\\r\\n    [Title] NVARCHAR(30),\\r\\n    [ReportsTo] INTEGER,\\r\\n    [BirthDate] DATETIME,\\r\\n    [HireDate] DATETIME,\\r\\n    [Address] NVARCHAR(70),\\r\\n    [City] NVARCHAR(40),\\r\\n    [State] NVARCHAR(40),\\r\\n    [Country] NVARCHAR(40),\\r\\n    [PostalCode] NVARCHAR(10),\\r\\n    [Phone] NVARCHAR(24),\\r\\n    [Fax] NVARCHAR(24),\\r\\n    [Email] NVARCHAR(60),\\r\\n    CONSTRAINT [PK_Employee] PRIMARY KEY  ([EmployeeId]),\\r\\n    FOREIGN KEY ([ReportsTo]) REFERENCES [Employee] ([EmployeeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Genre]\\r\\n(\\r\\n    [GenreId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Genre] PRIMARY KEY  ([GenreId])\\r\\n)', 'CREATE TABLE [Invoice]\\r\\n(\\r\\n    [InvoiceId] INTEGER  NOT NULL,\\r\\n    [CustomerId] INTEGER  NOT NULL,\\r\\n    [InvoiceDate] DATETIME  NOT NULL,\\r\\n    [BillingAddress] NVARCHAR(70),\\r\\n    [BillingCity] NVARCHAR(40),\\r\\n    [BillingState] NVARCHAR(40),\\r\\n    [BillingCountry] NVARCHAR(40),\\r\\n    [BillingPostalCode] NVARCHAR(10),\\r\\n    [Total] NUMERIC(10,2)  NOT NULL,\\r\\n    CONSTRAINT [PK_Invoice] PRIMARY KEY  ([InvoiceId]),\\r\\n    FOREIGN KEY ([CustomerId]) REFERENCES [Customer] ([CustomerId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [InvoiceLine]\\r\\n(\\r\\n    [InvoiceLineId] INTEGER  NOT NULL,\\r\\n    [InvoiceId] INTEGER  NOT NULL,\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    [UnitPrice] NUMERIC(10,2)  NOT NULL,\\r\\n    [Quantity] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_InvoiceLine] PRIMARY KEY  ([InvoiceLineId]),\\r\\n    FOREIGN KEY ([InvoiceId]) REFERENCES [Invoice] ([InvoiceId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [MediaType]\\r\\n(\\r\\n    [MediaTypeId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_MediaType] PRIMARY KEY  ([MediaTypeId])\\r\\n)', 'CREATE TABLE [Playlist]\\r\\n(\\r\\n    [PlaylistId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Playlist] PRIMARY KEY  ([PlaylistId])\\r\\n)', 'CREATE TABLE [PlaylistTrack]\\r\\n(\\r\\n    [PlaylistId] INTEGER  NOT NULL,\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_PlaylistTrack] PRIMARY KEY  ([PlaylistId], [TrackId]),\\r\\n    FOREIGN KEY ([PlaylistId]) REFERENCES [Playlist] ([PlaylistId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Track]\\r\\n(\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(200)  NOT NULL,\\r\\n    [AlbumId] INTEGER,\\r\\n    [MediaTypeId] INTEGER  NOT NULL,\\r\\n    [GenreId] INTEGER,\\r\\n    [Composer] NVARCHAR(220),\\r\\n    [Milliseconds] INTEGER  NOT NULL,\\r\\n    [Bytes] INTEGER,\\r\\n    [UnitPrice] NUMERIC(10,2)  NOT NULL,\\r\\n    CONSTRAINT [PK_Track] PRIMARY KEY  ([TrackId]),\\r\\n    FOREIGN KEY ([AlbumId]) REFERENCES [Album] ([AlbumId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([GenreId]) REFERENCES [Genre] ([GenreId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([MediaTypeId]) REFERENCES [MediaType] ([MediaTypeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)'], Based on the provided database schema information, List the top 5 most expensive tracks.\n ### SQL:\n ```sql\n SELECT TOP 5 [Name], [UnitPrice]\n FROM [Track]\n ORDER BY [UnitPrice] DESC\n```\nThis SQL query will return the top 5 most expensive tracks from the `Track` table, ordered by their `UnitPrice` in descending order.",
        "clean_sql_extracted": "SELECT TOP 5 [Name], [UnitPrice] FROM [Track] ORDER BY [UnitPrice] DESC"
    },
    {
        "db_id": "chinook",
        "natural_language_question": "Which tracks belong to the 'Rock' genre?",
        "gold_sql": "SELECT Name FROM Track WHERE GenreId = (SELECT GenreId FROM Genre WHERE Name = 'Rock');",
        "raw_model_output": "Database Schema ['CREATE TABLE [Album]\\r\\n(\\r\\n    [AlbumId] INTEGER  NOT NULL,\\r\\n    [Title] NVARCHAR(160)  NOT NULL,\\r\\n    [ArtistId] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_Album] PRIMARY KEY  ([AlbumId]),\\r\\n    FOREIGN KEY ([ArtistId]) REFERENCES [Artist] ([ArtistId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Artist]\\r\\n(\\r\\n    [ArtistId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Artist] PRIMARY KEY  ([ArtistId])\\r\\n)', 'CREATE TABLE [Customer]\\r\\n(\\r\\n    [CustomerId] INTEGER  NOT NULL,\\r\\n    [FirstName] NVARCHAR(40)  NOT NULL,\\r\\n    [LastName] NVARCHAR(20)  NOT NULL,\\r\\n    [Company] NVARCHAR(80),\\r\\n    [Address] NVARCHAR(70),\\r\\n    [City] NVARCHAR(40),\\r\\n    [State] NVARCHAR(40),\\r\\n    [Country] NVARCHAR(40),\\r\\n    [PostalCode] NVARCHAR(10),\\r\\n    [Phone] NVARCHAR(24),\\r\\n    [Fax] NVARCHAR(24),\\r\\n    [Email] NVARCHAR(60)  NOT NULL,\\r\\n    [SupportRepId] INTEGER,\\r\\n    CONSTRAINT [PK_Customer] PRIMARY KEY  ([CustomerId]),\\r\\n    FOREIGN KEY ([SupportRepId]) REFERENCES [Employee] ([EmployeeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Employee]\\r\\n(\\r\\n    [EmployeeId] INTEGER  NOT NULL,\\r\\n    [LastName] NVARCHAR(20)  NOT NULL,\\r\\n    [FirstName] NVARCHAR(20)  NOT NULL,\\r\\n    [Title] NVARCHAR(30),\\r\\n    [ReportsTo] INTEGER,\\r\\n    [BirthDate] DATETIME,\\r\\n    [HireDate] DATETIME,\\r\\n    [Address] NVARCHAR(70),\\r\\n    [City] NVARCHAR(40),\\r\\n    [State] NVARCHAR(40),\\r\\n    [Country] NVARCHAR(40),\\r\\n    [PostalCode] NVARCHAR(10),\\r\\n    [Phone] NVARCHAR(24),\\r\\n    [Fax] NVARCHAR(24),\\r\\n    [Email] NVARCHAR(60),\\r\\n    CONSTRAINT [PK_Employee] PRIMARY KEY  ([EmployeeId]),\\r\\n    FOREIGN KEY ([ReportsTo]) REFERENCES [Employee] ([EmployeeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Genre]\\r\\n(\\r\\n    [GenreId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Genre] PRIMARY KEY  ([GenreId])\\r\\n)', 'CREATE TABLE [Invoice]\\r\\n(\\r\\n    [InvoiceId] INTEGER  NOT NULL,\\r\\n    [CustomerId] INTEGER  NOT NULL,\\r\\n    [InvoiceDate] DATETIME  NOT NULL,\\r\\n    [BillingAddress] NVARCHAR(70),\\r\\n    [BillingCity] NVARCHAR(40),\\r\\n    [BillingState] NVARCHAR(40),\\r\\n    [BillingCountry] NVARCHAR(40),\\r\\n    [BillingPostalCode] NVARCHAR(10),\\r\\n    [Total] NUMERIC(10,2)  NOT NULL,\\r\\n    CONSTRAINT [PK_Invoice] PRIMARY KEY  ([InvoiceId]),\\r\\n    FOREIGN KEY ([CustomerId]) REFERENCES [Customer] ([CustomerId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [InvoiceLine]\\r\\n(\\r\\n    [InvoiceLineId] INTEGER  NOT NULL,\\r\\n    [InvoiceId] INTEGER  NOT NULL,\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    [UnitPrice] NUMERIC(10,2)  NOT NULL,\\r\\n    [Quantity] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_InvoiceLine] PRIMARY KEY  ([InvoiceLineId]),\\r\\n    FOREIGN KEY ([InvoiceId]) REFERENCES [Invoice] ([InvoiceId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [MediaType]\\r\\n(\\r\\n    [MediaTypeId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_MediaType] PRIMARY KEY  ([MediaTypeId])\\r\\n)', 'CREATE TABLE [Playlist]\\r\\n(\\r\\n    [PlaylistId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Playlist] PRIMARY KEY  ([PlaylistId])\\r\\n)', 'CREATE TABLE [PlaylistTrack]\\r\\n(\\r\\n    [PlaylistId] INTEGER  NOT NULL,\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_PlaylistTrack] PRIMARY KEY  ([PlaylistId], [TrackId]),\\r\\n    FOREIGN KEY ([PlaylistId]) REFERENCES [Playlist] ([PlaylistId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Track]\\r\\n(\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(200)  NOT NULL,\\r\\n    [AlbumId] INTEGER,\\r\\n    [MediaTypeId] INTEGER  NOT NULL,\\r\\n    [GenreId] INTEGER,\\r\\n    [Composer] NVARCHAR(220),\\r\\n    [Milliseconds] INTEGER  NOT NULL,\\r\\n    [Bytes] INTEGER,\\r\\n    [UnitPrice] NUMERIC(10,2)  NOT NULL,\\r\\n    CONSTRAINT [PK_Track] PRIMARY KEY  ([TrackId]),\\r\\n    FOREIGN KEY ([AlbumId]) REFERENCES [Album] ([AlbumId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([GenreId]) REFERENCES [Genre] ([GenreId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([MediaTypeId]) REFERENCES [MediaType] ([MediaTypeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)'], Based on the provided database schema information, Which tracks belong to the 'Rock' genre?\n ### SQL:\n ```sql\n SELECT [Name]\n FROM [Track]\n WHERE [GenreId] = (SELECT [GenreId] FROM [Genre] WHERE [Name] = 'Rock')\n```\nThis SQL query will return the names of all tracks that belong to the 'Rock' genre. The query first selects the GenreId for the 'Rock' genre using a subquery, and then uses that GenreId to filter the tracks in the Track table.",
        "clean_sql_extracted": "SELECT [Name] FROM [Track] WHERE [GenreId] = (SELECT [GenreId] FROM [Genre] WHERE [Name] = 'Rock')"
    },
    {
        "db_id": "chinook",
        "natural_language_question": "Count the number of invoices for each country.",
        "gold_sql": "SELECT BillingCountry, COUNT(*) FROM Invoice GROUP BY BillingCountry;",
        "raw_model_output": "Database Schema ['CREATE TABLE [Album]\\r\\n(\\r\\n    [AlbumId] INTEGER  NOT NULL,\\r\\n    [Title] NVARCHAR(160)  NOT NULL,\\r\\n    [ArtistId] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_Album] PRIMARY KEY  ([AlbumId]),\\r\\n    FOREIGN KEY ([ArtistId]) REFERENCES [Artist] ([ArtistId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Artist]\\r\\n(\\r\\n    [ArtistId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Artist] PRIMARY KEY  ([ArtistId])\\r\\n)', 'CREATE TABLE [Customer]\\r\\n(\\r\\n    [CustomerId] INTEGER  NOT NULL,\\r\\n    [FirstName] NVARCHAR(40)  NOT NULL,\\r\\n    [LastName] NVARCHAR(20)  NOT NULL,\\r\\n    [Company] NVARCHAR(80),\\r\\n    [Address] NVARCHAR(70),\\r\\n    [City] NVARCHAR(40),\\r\\n    [State] NVARCHAR(40),\\r\\n    [Country] NVARCHAR(40),\\r\\n    [PostalCode] NVARCHAR(10),\\r\\n    [Phone] NVARCHAR(24),\\r\\n    [Fax] NVARCHAR(24),\\r\\n    [Email] NVARCHAR(60)  NOT NULL,\\r\\n    [SupportRepId] INTEGER,\\r\\n    CONSTRAINT [PK_Customer] PRIMARY KEY  ([CustomerId]),\\r\\n    FOREIGN KEY ([SupportRepId]) REFERENCES [Employee] ([EmployeeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Employee]\\r\\n(\\r\\n    [EmployeeId] INTEGER  NOT NULL,\\r\\n    [LastName] NVARCHAR(20)  NOT NULL,\\r\\n    [FirstName] NVARCHAR(20)  NOT NULL,\\r\\n    [Title] NVARCHAR(30),\\r\\n    [ReportsTo] INTEGER,\\r\\n    [BirthDate] DATETIME,\\r\\n    [HireDate] DATETIME,\\r\\n    [Address] NVARCHAR(70),\\r\\n    [City] NVARCHAR(40),\\r\\n    [State] NVARCHAR(40),\\r\\n    [Country] NVARCHAR(40),\\r\\n    [PostalCode] NVARCHAR(10),\\r\\n    [Phone] NVARCHAR(24),\\r\\n    [Fax] NVARCHAR(24),\\r\\n    [Email] NVARCHAR(60),\\r\\n    CONSTRAINT [PK_Employee] PRIMARY KEY  ([EmployeeId]),\\r\\n    FOREIGN KEY ([ReportsTo]) REFERENCES [Employee] ([EmployeeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Genre]\\r\\n(\\r\\n    [GenreId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Genre] PRIMARY KEY  ([GenreId])\\r\\n)', 'CREATE TABLE [Invoice]\\r\\n(\\r\\n    [InvoiceId] INTEGER  NOT NULL,\\r\\n    [CustomerId] INTEGER  NOT NULL,\\r\\n    [InvoiceDate] DATETIME  NOT NULL,\\r\\n    [BillingAddress] NVARCHAR(70),\\r\\n    [BillingCity] NVARCHAR(40),\\r\\n    [BillingState] NVARCHAR(40),\\r\\n    [BillingCountry] NVARCHAR(40),\\r\\n    [BillingPostalCode] NVARCHAR(10),\\r\\n    [Total] NUMERIC(10,2)  NOT NULL,\\r\\n    CONSTRAINT [PK_Invoice] PRIMARY KEY  ([InvoiceId]),\\r\\n    FOREIGN KEY ([CustomerId]) REFERENCES [Customer] ([CustomerId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [InvoiceLine]\\r\\n(\\r\\n    [InvoiceLineId] INTEGER  NOT NULL,\\r\\n    [InvoiceId] INTEGER  NOT NULL,\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    [UnitPrice] NUMERIC(10,2)  NOT NULL,\\r\\n    [Quantity] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_InvoiceLine] PRIMARY KEY  ([InvoiceLineId]),\\r\\n    FOREIGN KEY ([InvoiceId]) REFERENCES [Invoice] ([InvoiceId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [MediaType]\\r\\n(\\r\\n    [MediaTypeId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_MediaType] PRIMARY KEY  ([MediaTypeId])\\r\\n)', 'CREATE TABLE [Playlist]\\r\\n(\\r\\n    [PlaylistId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Playlist] PRIMARY KEY  ([PlaylistId])\\r\\n)', 'CREATE TABLE [PlaylistTrack]\\r\\n(\\r\\n    [PlaylistId] INTEGER  NOT NULL,\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_PlaylistTrack] PRIMARY KEY  ([PlaylistId], [TrackId]),\\r\\n    FOREIGN KEY ([PlaylistId]) REFERENCES [Playlist] ([PlaylistId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Track]\\r\\n(\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(200)  NOT NULL,\\r\\n    [AlbumId] INTEGER,\\r\\n    [MediaTypeId] INTEGER  NOT NULL,\\r\\n    [GenreId] INTEGER,\\r\\n    [Composer] NVARCHAR(220),\\r\\n    [Milliseconds] INTEGER  NOT NULL,\\r\\n    [Bytes] INTEGER,\\r\\n    [UnitPrice] NUMERIC(10,2)  NOT NULL,\\r\\n    CONSTRAINT [PK_Track] PRIMARY KEY  ([TrackId]),\\r\\n    FOREIGN KEY ([AlbumId]) REFERENCES [Album] ([AlbumId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([GenreId]) REFERENCES [Genre] ([GenreId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([MediaTypeId]) REFERENCES [MediaType] ([MediaTypeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)'], Based on the provided database schema information, Count the number of invoices for each country.\n ### SQL:\n ```sql\n SELECT i.BillingCountry, COUNT(*) as InvoiceCount\n FROM Invoice i\n GROUP BY i.BillingCountry\n ORDER BY i.BillingCountry\n```\nThis SQL query will return the number of invoices for each country. The result set will include two columns: `BillingCountry` and `InvoiceCount`. The `BillingCountry` column will contain the name of the country, and the `InvoiceCount` column will contain the number of invoices for that country. The result set will be ordered by the `BillingCountry` column in ascending order.",
        "clean_sql_extracted": "SELECT i.BillingCountry, COUNT(*) as InvoiceCount FROM Invoice i GROUP BY i.BillingCountry ORDER BY i.BillingCountry"
    },
    {
        "db_id": "chinook",
        "natural_language_question": "Find the name of the artist who released the album 'Californication'.",
        "gold_sql": "SELECT Name FROM Artist WHERE ArtistId = (SELECT ArtistId FROM Album WHERE Title = 'Californication');",
        "raw_model_output": "Database Schema ['CREATE TABLE [Album]\\r\\n(\\r\\n    [AlbumId] INTEGER  NOT NULL,\\r\\n    [Title] NVARCHAR(160)  NOT NULL,\\r\\n    [ArtistId] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_Album] PRIMARY KEY  ([AlbumId]),\\r\\n    FOREIGN KEY ([ArtistId]) REFERENCES [Artist] ([ArtistId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Artist]\\r\\n(\\r\\n    [ArtistId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Artist] PRIMARY KEY  ([ArtistId])\\r\\n)', 'CREATE TABLE [Customer]\\r\\n(\\r\\n    [CustomerId] INTEGER  NOT NULL,\\r\\n    [FirstName] NVARCHAR(40)  NOT NULL,\\r\\n    [LastName] NVARCHAR(20)  NOT NULL,\\r\\n    [Company] NVARCHAR(80),\\r\\n    [Address] NVARCHAR(70),\\r\\n    [City] NVARCHAR(40),\\r\\n    [State] NVARCHAR(40),\\r\\n    [Country] NVARCHAR(40),\\r\\n    [PostalCode] NVARCHAR(10),\\r\\n    [Phone] NVARCHAR(24),\\r\\n    [Fax] NVARCHAR(24),\\r\\n    [Email] NVARCHAR(60)  NOT NULL,\\r\\n    [SupportRepId] INTEGER,\\r\\n    CONSTRAINT [PK_Customer] PRIMARY KEY  ([CustomerId]),\\r\\n    FOREIGN KEY ([SupportRepId]) REFERENCES [Employee] ([EmployeeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Employee]\\r\\n(\\r\\n    [EmployeeId] INTEGER  NOT NULL,\\r\\n    [LastName] NVARCHAR(20)  NOT NULL,\\r\\n    [FirstName] NVARCHAR(20)  NOT NULL,\\r\\n    [Title] NVARCHAR(30),\\r\\n    [ReportsTo] INTEGER,\\r\\n    [BirthDate] DATETIME,\\r\\n    [HireDate] DATETIME,\\r\\n    [Address] NVARCHAR(70),\\r\\n    [City] NVARCHAR(40),\\r\\n    [State] NVARCHAR(40),\\r\\n    [Country] NVARCHAR(40),\\r\\n    [PostalCode] NVARCHAR(10),\\r\\n    [Phone] NVARCHAR(24),\\r\\n    [Fax] NVARCHAR(24),\\r\\n    [Email] NVARCHAR(60),\\r\\n    CONSTRAINT [PK_Employee] PRIMARY KEY  ([EmployeeId]),\\r\\n    FOREIGN KEY ([ReportsTo]) REFERENCES [Employee] ([EmployeeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Genre]\\r\\n(\\r\\n    [GenreId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Genre] PRIMARY KEY  ([GenreId])\\r\\n)', 'CREATE TABLE [Invoice]\\r\\n(\\r\\n    [InvoiceId] INTEGER  NOT NULL,\\r\\n    [CustomerId] INTEGER  NOT NULL,\\r\\n    [InvoiceDate] DATETIME  NOT NULL,\\r\\n    [BillingAddress] NVARCHAR(70),\\r\\n    [BillingCity] NVARCHAR(40),\\r\\n    [BillingState] NVARCHAR(40),\\r\\n    [BillingCountry] NVARCHAR(40),\\r\\n    [BillingPostalCode] NVARCHAR(10),\\r\\n    [Total] NUMERIC(10,2)  NOT NULL,\\r\\n    CONSTRAINT [PK_Invoice] PRIMARY KEY  ([InvoiceId]),\\r\\n    FOREIGN KEY ([CustomerId]) REFERENCES [Customer] ([CustomerId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [InvoiceLine]\\r\\n(\\r\\n    [InvoiceLineId] INTEGER  NOT NULL,\\r\\n    [InvoiceId] INTEGER  NOT NULL,\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    [UnitPrice] NUMERIC(10,2)  NOT NULL,\\r\\n    [Quantity] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_InvoiceLine] PRIMARY KEY  ([InvoiceLineId]),\\r\\n    FOREIGN KEY ([InvoiceId]) REFERENCES [Invoice] ([InvoiceId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [MediaType]\\r\\n(\\r\\n    [MediaTypeId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_MediaType] PRIMARY KEY  ([MediaTypeId])\\r\\n)', 'CREATE TABLE [Playlist]\\r\\n(\\r\\n    [PlaylistId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Playlist] PRIMARY KEY  ([PlaylistId])\\r\\n)', 'CREATE TABLE [PlaylistTrack]\\r\\n(\\r\\n    [PlaylistId] INTEGER  NOT NULL,\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_PlaylistTrack] PRIMARY KEY  ([PlaylistId], [TrackId]),\\r\\n    FOREIGN KEY ([PlaylistId]) REFERENCES [Playlist] ([PlaylistId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Track]\\r\\n(\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(200)  NOT NULL,\\r\\n    [AlbumId] INTEGER,\\r\\n    [MediaTypeId] INTEGER  NOT NULL,\\r\\n    [GenreId] INTEGER,\\r\\n    [Composer] NVARCHAR(220),\\r\\n    [Milliseconds] INTEGER  NOT NULL,\\r\\n    [Bytes] INTEGER,\\r\\n    [UnitPrice] NUMERIC(10,2)  NOT NULL,\\r\\n    CONSTRAINT [PK_Track] PRIMARY KEY  ([TrackId]),\\r\\n    FOREIGN KEY ([AlbumId]) REFERENCES [Album] ([AlbumId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([GenreId]) REFERENCES [Genre] ([GenreId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([MediaTypeId]) REFERENCES [MediaType] ([MediaTypeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)'], Based on the provided database schema information, Find the name of the artist who released the album 'Californication'.\n ### SQL:\n ```sql\n SELECT Name \n FROM Artist \n INNER JOIN Album ON Artist.ArtistId = Album.ArtistId \n WHERE Title = 'Californication'\n```\nThis query will return the name of the artist who released the album 'Californication'.",
        "clean_sql_extracted": "SELECT Name FROM Artist INNER JOIN Album ON Artist.ArtistId = Album.ArtistId WHERE Title = 'Californication'"
    },
    {
        "db_id": "chinook",
        "natural_language_question": "List all customers who have never made a purchase.",
        "gold_sql": "SELECT CustomerId FROM Customer WHERE CustomerId NOT IN (SELECT CustomerId FROM Invoice);",
        "raw_model_output": "Database Schema ['CREATE TABLE [Album]\\r\\n(\\r\\n    [AlbumId] INTEGER  NOT NULL,\\r\\n    [Title] NVARCHAR(160)  NOT NULL,\\r\\n    [ArtistId] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_Album] PRIMARY KEY  ([AlbumId]),\\r\\n    FOREIGN KEY ([ArtistId]) REFERENCES [Artist] ([ArtistId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Artist]\\r\\n(\\r\\n    [ArtistId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Artist] PRIMARY KEY  ([ArtistId])\\r\\n)', 'CREATE TABLE [Customer]\\r\\n(\\r\\n    [CustomerId] INTEGER  NOT NULL,\\r\\n    [FirstName] NVARCHAR(40)  NOT NULL,\\r\\n    [LastName] NVARCHAR(20)  NOT NULL,\\r\\n    [Company] NVARCHAR(80),\\r\\n    [Address] NVARCHAR(70),\\r\\n    [City] NVARCHAR(40),\\r\\n    [State] NVARCHAR(40),\\r\\n    [Country] NVARCHAR(40),\\r\\n    [PostalCode] NVARCHAR(10),\\r\\n    [Phone] NVARCHAR(24),\\r\\n    [Fax] NVARCHAR(24),\\r\\n    [Email] NVARCHAR(60)  NOT NULL,\\r\\n    [SupportRepId] INTEGER,\\r\\n    CONSTRAINT [PK_Customer] PRIMARY KEY  ([CustomerId]),\\r\\n    FOREIGN KEY ([SupportRepId]) REFERENCES [Employee] ([EmployeeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Employee]\\r\\n(\\r\\n    [EmployeeId] INTEGER  NOT NULL,\\r\\n    [LastName] NVARCHAR(20)  NOT NULL,\\r\\n    [FirstName] NVARCHAR(20)  NOT NULL,\\r\\n    [Title] NVARCHAR(30),\\r\\n    [ReportsTo] INTEGER,\\r\\n    [BirthDate] DATETIME,\\r\\n    [HireDate] DATETIME,\\r\\n    [Address] NVARCHAR(70),\\r\\n    [City] NVARCHAR(40),\\r\\n    [State] NVARCHAR(40),\\r\\n    [Country] NVARCHAR(40),\\r\\n    [PostalCode] NVARCHAR(10),\\r\\n    [Phone] NVARCHAR(24),\\r\\n    [Fax] NVARCHAR(24),\\r\\n    [Email] NVARCHAR(60),\\r\\n    CONSTRAINT [PK_Employee] PRIMARY KEY  ([EmployeeId]),\\r\\n    FOREIGN KEY ([ReportsTo]) REFERENCES [Employee] ([EmployeeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Genre]\\r\\n(\\r\\n    [GenreId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Genre] PRIMARY KEY  ([GenreId])\\r\\n)', 'CREATE TABLE [Invoice]\\r\\n(\\r\\n    [InvoiceId] INTEGER  NOT NULL,\\r\\n    [CustomerId] INTEGER  NOT NULL,\\r\\n    [InvoiceDate] DATETIME  NOT NULL,\\r\\n    [BillingAddress] NVARCHAR(70),\\r\\n    [BillingCity] NVARCHAR(40),\\r\\n    [BillingState] NVARCHAR(40),\\r\\n    [BillingCountry] NVARCHAR(40),\\r\\n    [BillingPostalCode] NVARCHAR(10),\\r\\n    [Total] NUMERIC(10,2)  NOT NULL,\\r\\n    CONSTRAINT [PK_Invoice] PRIMARY KEY  ([InvoiceId]),\\r\\n    FOREIGN KEY ([CustomerId]) REFERENCES [Customer] ([CustomerId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [InvoiceLine]\\r\\n(\\r\\n    [InvoiceLineId] INTEGER  NOT NULL,\\r\\n    [InvoiceId] INTEGER  NOT NULL,\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    [UnitPrice] NUMERIC(10,2)  NOT NULL,\\r\\n    [Quantity] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_InvoiceLine] PRIMARY KEY  ([InvoiceLineId]),\\r\\n    FOREIGN KEY ([InvoiceId]) REFERENCES [Invoice] ([InvoiceId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [MediaType]\\r\\n(\\r\\n    [MediaTypeId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_MediaType] PRIMARY KEY  ([MediaTypeId])\\r\\n)', 'CREATE TABLE [Playlist]\\r\\n(\\r\\n    [PlaylistId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Playlist] PRIMARY KEY  ([PlaylistId])\\r\\n)', 'CREATE TABLE [PlaylistTrack]\\r\\n(\\r\\n    [PlaylistId] INTEGER  NOT NULL,\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_PlaylistTrack] PRIMARY KEY  ([PlaylistId], [TrackId]),\\r\\n    FOREIGN KEY ([PlaylistId]) REFERENCES [Playlist] ([PlaylistId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Track]\\r\\n(\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(200)  NOT NULL,\\r\\n    [AlbumId] INTEGER,\\r\\n    [MediaTypeId] INTEGER  NOT NULL,\\r\\n    [GenreId] INTEGER,\\r\\n    [Composer] NVARCHAR(220),\\r\\n    [Milliseconds] INTEGER  NOT NULL,\\r\\n    [Bytes] INTEGER,\\r\\n    [UnitPrice] NUMERIC(10,2)  NOT NULL,\\r\\n    CONSTRAINT [PK_Track] PRIMARY KEY  ([TrackId]),\\r\\n    FOREIGN KEY ([AlbumId]) REFERENCES [Album] ([AlbumId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([GenreId]) REFERENCES [Genre] ([GenreId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([MediaTypeId]) REFERENCES [MediaType] ([MediaTypeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)'], Based on the provided database schema information, List all customers who have never made a purchase.\n ### SQL:\n ```sql\n SELECT C.FirstName, C.LastName\n FROM Customer C\n LEFT JOIN Invoice I ON C.CustomerId = I.CustomerId\n WHERE I.InvoiceId IS NULL\n```\nThis query uses a LEFT JOIN to join the Customer and Invoice tables on the CustomerId field. The WHERE clause filters the results to only include rows where the InvoiceId is NULL, indicating that the customer has never made a purchase. The SELECT statement only returns the FirstName and LastName columns for the customers who meet this condition.",
        "clean_sql_extracted": "SELECT C.FirstName, C.LastName FROM Customer C LEFT JOIN Invoice I ON C.CustomerId = I.CustomerId WHERE I.InvoiceId IS NULL"
    },
    {
        "db_id": "chinook",
        "natural_language_question": "How many different genres are there?",
        "gold_sql": "SELECT COUNT(*) FROM Genre;",
        "raw_model_output": "Database Schema ['CREATE TABLE [Album]\\r\\n(\\r\\n    [AlbumId] INTEGER  NOT NULL,\\r\\n    [Title] NVARCHAR(160)  NOT NULL,\\r\\n    [ArtistId] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_Album] PRIMARY KEY  ([AlbumId]),\\r\\n    FOREIGN KEY ([ArtistId]) REFERENCES [Artist] ([ArtistId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Artist]\\r\\n(\\r\\n    [ArtistId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Artist] PRIMARY KEY  ([ArtistId])\\r\\n)', 'CREATE TABLE [Customer]\\r\\n(\\r\\n    [CustomerId] INTEGER  NOT NULL,\\r\\n    [FirstName] NVARCHAR(40)  NOT NULL,\\r\\n    [LastName] NVARCHAR(20)  NOT NULL,\\r\\n    [Company] NVARCHAR(80),\\r\\n    [Address] NVARCHAR(70),\\r\\n    [City] NVARCHAR(40),\\r\\n    [State] NVARCHAR(40),\\r\\n    [Country] NVARCHAR(40),\\r\\n    [PostalCode] NVARCHAR(10),\\r\\n    [Phone] NVARCHAR(24),\\r\\n    [Fax] NVARCHAR(24),\\r\\n    [Email] NVARCHAR(60)  NOT NULL,\\r\\n    [SupportRepId] INTEGER,\\r\\n    CONSTRAINT [PK_Customer] PRIMARY KEY  ([CustomerId]),\\r\\n    FOREIGN KEY ([SupportRepId]) REFERENCES [Employee] ([EmployeeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Employee]\\r\\n(\\r\\n    [EmployeeId] INTEGER  NOT NULL,\\r\\n    [LastName] NVARCHAR(20)  NOT NULL,\\r\\n    [FirstName] NVARCHAR(20)  NOT NULL,\\r\\n    [Title] NVARCHAR(30),\\r\\n    [ReportsTo] INTEGER,\\r\\n    [BirthDate] DATETIME,\\r\\n    [HireDate] DATETIME,\\r\\n    [Address] NVARCHAR(70),\\r\\n    [City] NVARCHAR(40),\\r\\n    [State] NVARCHAR(40),\\r\\n    [Country] NVARCHAR(40),\\r\\n    [PostalCode] NVARCHAR(10),\\r\\n    [Phone] NVARCHAR(24),\\r\\n    [Fax] NVARCHAR(24),\\r\\n    [Email] NVARCHAR(60),\\r\\n    CONSTRAINT [PK_Employee] PRIMARY KEY  ([EmployeeId]),\\r\\n    FOREIGN KEY ([ReportsTo]) REFERENCES [Employee] ([EmployeeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Genre]\\r\\n(\\r\\n    [GenreId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Genre] PRIMARY KEY  ([GenreId])\\r\\n)', 'CREATE TABLE [Invoice]\\r\\n(\\r\\n    [InvoiceId] INTEGER  NOT NULL,\\r\\n    [CustomerId] INTEGER  NOT NULL,\\r\\n    [InvoiceDate] DATETIME  NOT NULL,\\r\\n    [BillingAddress] NVARCHAR(70),\\r\\n    [BillingCity] NVARCHAR(40),\\r\\n    [BillingState] NVARCHAR(40),\\r\\n    [BillingCountry] NVARCHAR(40),\\r\\n    [BillingPostalCode] NVARCHAR(10),\\r\\n    [Total] NUMERIC(10,2)  NOT NULL,\\r\\n    CONSTRAINT [PK_Invoice] PRIMARY KEY  ([InvoiceId]),\\r\\n    FOREIGN KEY ([CustomerId]) REFERENCES [Customer] ([CustomerId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [InvoiceLine]\\r\\n(\\r\\n    [InvoiceLineId] INTEGER  NOT NULL,\\r\\n    [InvoiceId] INTEGER  NOT NULL,\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    [UnitPrice] NUMERIC(10,2)  NOT NULL,\\r\\n    [Quantity] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_InvoiceLine] PRIMARY KEY  ([InvoiceLineId]),\\r\\n    FOREIGN KEY ([InvoiceId]) REFERENCES [Invoice] ([InvoiceId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [MediaType]\\r\\n(\\r\\n    [MediaTypeId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_MediaType] PRIMARY KEY  ([MediaTypeId])\\r\\n)', 'CREATE TABLE [Playlist]\\r\\n(\\r\\n    [PlaylistId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Playlist] PRIMARY KEY  ([PlaylistId])\\r\\n)', 'CREATE TABLE [PlaylistTrack]\\r\\n(\\r\\n    [PlaylistId] INTEGER  NOT NULL,\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_PlaylistTrack] PRIMARY KEY  ([PlaylistId], [TrackId]),\\r\\n    FOREIGN KEY ([PlaylistId]) REFERENCES [Playlist] ([PlaylistId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Track]\\r\\n(\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(200)  NOT NULL,\\r\\n    [AlbumId] INTEGER,\\r\\n    [MediaTypeId] INTEGER  NOT NULL,\\r\\n    [GenreId] INTEGER,\\r\\n    [Composer] NVARCHAR(220),\\r\\n    [Milliseconds] INTEGER  NOT NULL,\\r\\n    [Bytes] INTEGER,\\r\\n    [UnitPrice] NUMERIC(10,2)  NOT NULL,\\r\\n    CONSTRAINT [PK_Track] PRIMARY KEY  ([TrackId]),\\r\\n    FOREIGN KEY ([AlbumId]) REFERENCES [Album] ([AlbumId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([GenreId]) REFERENCES [Genre] ([GenreId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([MediaTypeId]) REFERENCES [MediaType] ([MediaTypeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)'], Based on the provided database schema information, How many different genres are there?\n ### SQL:\n ```sql\n SELECT COUNT(*) FROM Genre;\n```\nThis SQL query will return the number of genres in the Genre table.",
        "clean_sql_extracted": "SELECT COUNT(*) FROM Genre;"
    },
    {
        "db_id": "chinook",
        "natural_language_question": "Find the average invoice total.",
        "gold_sql": "SELECT AVG(Total) FROM Invoice;",
        "raw_model_output": "Database Schema ['CREATE TABLE [Album]\\r\\n(\\r\\n    [AlbumId] INTEGER  NOT NULL,\\r\\n    [Title] NVARCHAR(160)  NOT NULL,\\r\\n    [ArtistId] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_Album] PRIMARY KEY  ([AlbumId]),\\r\\n    FOREIGN KEY ([ArtistId]) REFERENCES [Artist] ([ArtistId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Artist]\\r\\n(\\r\\n    [ArtistId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Artist] PRIMARY KEY  ([ArtistId])\\r\\n)', 'CREATE TABLE [Customer]\\r\\n(\\r\\n    [CustomerId] INTEGER  NOT NULL,\\r\\n    [FirstName] NVARCHAR(40)  NOT NULL,\\r\\n    [LastName] NVARCHAR(20)  NOT NULL,\\r\\n    [Company] NVARCHAR(80),\\r\\n    [Address] NVARCHAR(70),\\r\\n    [City] NVARCHAR(40),\\r\\n    [State] NVARCHAR(40),\\r\\n    [Country] NVARCHAR(40),\\r\\n    [PostalCode] NVARCHAR(10),\\r\\n    [Phone] NVARCHAR(24),\\r\\n    [Fax] NVARCHAR(24),\\r\\n    [Email] NVARCHAR(60)  NOT NULL,\\r\\n    [SupportRepId] INTEGER,\\r\\n    CONSTRAINT [PK_Customer] PRIMARY KEY  ([CustomerId]),\\r\\n    FOREIGN KEY ([SupportRepId]) REFERENCES [Employee] ([EmployeeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Employee]\\r\\n(\\r\\n    [EmployeeId] INTEGER  NOT NULL,\\r\\n    [LastName] NVARCHAR(20)  NOT NULL,\\r\\n    [FirstName] NVARCHAR(20)  NOT NULL,\\r\\n    [Title] NVARCHAR(30),\\r\\n    [ReportsTo] INTEGER,\\r\\n    [BirthDate] DATETIME,\\r\\n    [HireDate] DATETIME,\\r\\n    [Address] NVARCHAR(70),\\r\\n    [City] NVARCHAR(40),\\r\\n    [State] NVARCHAR(40),\\r\\n    [Country] NVARCHAR(40),\\r\\n    [PostalCode] NVARCHAR(10),\\r\\n    [Phone] NVARCHAR(24),\\r\\n    [Fax] NVARCHAR(24),\\r\\n    [Email] NVARCHAR(60),\\r\\n    CONSTRAINT [PK_Employee] PRIMARY KEY  ([EmployeeId]),\\r\\n    FOREIGN KEY ([ReportsTo]) REFERENCES [Employee] ([EmployeeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Genre]\\r\\n(\\r\\n    [GenreId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Genre] PRIMARY KEY  ([GenreId])\\r\\n)', 'CREATE TABLE [Invoice]\\r\\n(\\r\\n    [InvoiceId] INTEGER  NOT NULL,\\r\\n    [CustomerId] INTEGER  NOT NULL,\\r\\n    [InvoiceDate] DATETIME  NOT NULL,\\r\\n    [BillingAddress] NVARCHAR(70),\\r\\n    [BillingCity] NVARCHAR(40),\\r\\n    [BillingState] NVARCHAR(40),\\r\\n    [BillingCountry] NVARCHAR(40),\\r\\n    [BillingPostalCode] NVARCHAR(10),\\r\\n    [Total] NUMERIC(10,2)  NOT NULL,\\r\\n    CONSTRAINT [PK_Invoice] PRIMARY KEY  ([InvoiceId]),\\r\\n    FOREIGN KEY ([CustomerId]) REFERENCES [Customer] ([CustomerId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [InvoiceLine]\\r\\n(\\r\\n    [InvoiceLineId] INTEGER  NOT NULL,\\r\\n    [InvoiceId] INTEGER  NOT NULL,\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    [UnitPrice] NUMERIC(10,2)  NOT NULL,\\r\\n    [Quantity] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_InvoiceLine] PRIMARY KEY  ([InvoiceLineId]),\\r\\n    FOREIGN KEY ([InvoiceId]) REFERENCES [Invoice] ([InvoiceId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [MediaType]\\r\\n(\\r\\n    [MediaTypeId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_MediaType] PRIMARY KEY  ([MediaTypeId])\\r\\n)', 'CREATE TABLE [Playlist]\\r\\n(\\r\\n    [PlaylistId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Playlist] PRIMARY KEY  ([PlaylistId])\\r\\n)', 'CREATE TABLE [PlaylistTrack]\\r\\n(\\r\\n    [PlaylistId] INTEGER  NOT NULL,\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_PlaylistTrack] PRIMARY KEY  ([PlaylistId], [TrackId]),\\r\\n    FOREIGN KEY ([PlaylistId]) REFERENCES [Playlist] ([PlaylistId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Track]\\r\\n(\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(200)  NOT NULL,\\r\\n    [AlbumId] INTEGER,\\r\\n    [MediaTypeId] INTEGER  NOT NULL,\\r\\n    [GenreId] INTEGER,\\r\\n    [Composer] NVARCHAR(220),\\r\\n    [Milliseconds] INTEGER  NOT NULL,\\r\\n    [Bytes] INTEGER,\\r\\n    [UnitPrice] NUMERIC(10,2)  NOT NULL,\\r\\n    CONSTRAINT [PK_Track] PRIMARY KEY  ([TrackId]),\\r\\n    FOREIGN KEY ([AlbumId]) REFERENCES [Album] ([AlbumId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([GenreId]) REFERENCES [Genre] ([GenreId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([MediaTypeId]) REFERENCES [MediaType] ([MediaTypeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)'], Based on the provided database schema information, Find the average invoice total.\n ### SQL:\n ```sql\n SELECT AVG(Invoice.Total) as AverageInvoiceTotal\n FROM Invoice;\n```\nThis SQL query will return the average invoice total from the Invoice table.",
        "clean_sql_extracted": "SELECT AVG(Invoice.Total) as AverageInvoiceTotal FROM Invoice;"
    },
    {
        "db_id": "chinook",
        "natural_language_question": "List employees who report to Steve Johnson.",
        "gold_sql": "SELECT FirstName, LastName FROM Employee WHERE ReportsTo = (SELECT EmployeeId FROM Employee WHERE FirstName = 'Steve' AND LastName = 'Johnson');",
        "raw_model_output": "Database Schema ['CREATE TABLE [Album]\\r\\n(\\r\\n    [AlbumId] INTEGER  NOT NULL,\\r\\n    [Title] NVARCHAR(160)  NOT NULL,\\r\\n    [ArtistId] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_Album] PRIMARY KEY  ([AlbumId]),\\r\\n    FOREIGN KEY ([ArtistId]) REFERENCES [Artist] ([ArtistId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Artist]\\r\\n(\\r\\n    [ArtistId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Artist] PRIMARY KEY  ([ArtistId])\\r\\n)', 'CREATE TABLE [Customer]\\r\\n(\\r\\n    [CustomerId] INTEGER  NOT NULL,\\r\\n    [FirstName] NVARCHAR(40)  NOT NULL,\\r\\n    [LastName] NVARCHAR(20)  NOT NULL,\\r\\n    [Company] NVARCHAR(80),\\r\\n    [Address] NVARCHAR(70),\\r\\n    [City] NVARCHAR(40),\\r\\n    [State] NVARCHAR(40),\\r\\n    [Country] NVARCHAR(40),\\r\\n    [PostalCode] NVARCHAR(10),\\r\\n    [Phone] NVARCHAR(24),\\r\\n    [Fax] NVARCHAR(24),\\r\\n    [Email] NVARCHAR(60)  NOT NULL,\\r\\n    [SupportRepId] INTEGER,\\r\\n    CONSTRAINT [PK_Customer] PRIMARY KEY  ([CustomerId]),\\r\\n    FOREIGN KEY ([SupportRepId]) REFERENCES [Employee] ([EmployeeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Employee]\\r\\n(\\r\\n    [EmployeeId] INTEGER  NOT NULL,\\r\\n    [LastName] NVARCHAR(20)  NOT NULL,\\r\\n    [FirstName] NVARCHAR(20)  NOT NULL,\\r\\n    [Title] NVARCHAR(30),\\r\\n    [ReportsTo] INTEGER,\\r\\n    [BirthDate] DATETIME,\\r\\n    [HireDate] DATETIME,\\r\\n    [Address] NVARCHAR(70),\\r\\n    [City] NVARCHAR(40),\\r\\n    [State] NVARCHAR(40),\\r\\n    [Country] NVARCHAR(40),\\r\\n    [PostalCode] NVARCHAR(10),\\r\\n    [Phone] NVARCHAR(24),\\r\\n    [Fax] NVARCHAR(24),\\r\\n    [Email] NVARCHAR(60),\\r\\n    CONSTRAINT [PK_Employee] PRIMARY KEY  ([EmployeeId]),\\r\\n    FOREIGN KEY ([ReportsTo]) REFERENCES [Employee] ([EmployeeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Genre]\\r\\n(\\r\\n    [GenreId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Genre] PRIMARY KEY  ([GenreId])\\r\\n)', 'CREATE TABLE [Invoice]\\r\\n(\\r\\n    [InvoiceId] INTEGER  NOT NULL,\\r\\n    [CustomerId] INTEGER  NOT NULL,\\r\\n    [InvoiceDate] DATETIME  NOT NULL,\\r\\n    [BillingAddress] NVARCHAR(70),\\r\\n    [BillingCity] NVARCHAR(40),\\r\\n    [BillingState] NVARCHAR(40),\\r\\n    [BillingCountry] NVARCHAR(40),\\r\\n    [BillingPostalCode] NVARCHAR(10),\\r\\n    [Total] NUMERIC(10,2)  NOT NULL,\\r\\n    CONSTRAINT [PK_Invoice] PRIMARY KEY  ([InvoiceId]),\\r\\n    FOREIGN KEY ([CustomerId]) REFERENCES [Customer] ([CustomerId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [InvoiceLine]\\r\\n(\\r\\n    [InvoiceLineId] INTEGER  NOT NULL,\\r\\n    [InvoiceId] INTEGER  NOT NULL,\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    [UnitPrice] NUMERIC(10,2)  NOT NULL,\\r\\n    [Quantity] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_InvoiceLine] PRIMARY KEY  ([InvoiceLineId]),\\r\\n    FOREIGN KEY ([InvoiceId]) REFERENCES [Invoice] ([InvoiceId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [MediaType]\\r\\n(\\r\\n    [MediaTypeId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_MediaType] PRIMARY KEY  ([MediaTypeId])\\r\\n)', 'CREATE TABLE [Playlist]\\r\\n(\\r\\n    [PlaylistId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Playlist] PRIMARY KEY  ([PlaylistId])\\r\\n)', 'CREATE TABLE [PlaylistTrack]\\r\\n(\\r\\n    [PlaylistId] INTEGER  NOT NULL,\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_PlaylistTrack] PRIMARY KEY  ([PlaylistId], [TrackId]),\\r\\n    FOREIGN KEY ([PlaylistId]) REFERENCES [Playlist] ([PlaylistId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Track]\\r\\n(\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(200)  NOT NULL,\\r\\n    [AlbumId] INTEGER,\\r\\n    [MediaTypeId] INTEGER  NOT NULL,\\r\\n    [GenreId] INTEGER,\\r\\n    [Composer] NVARCHAR(220),\\r\\n    [Milliseconds] INTEGER  NOT NULL,\\r\\n    [Bytes] INTEGER,\\r\\n    [UnitPrice] NUMERIC(10,2)  NOT NULL,\\r\\n    CONSTRAINT [PK_Track] PRIMARY KEY  ([TrackId]),\\r\\n    FOREIGN KEY ([AlbumId]) REFERENCES [Album] ([AlbumId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([GenreId]) REFERENCES [Genre] ([GenreId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([MediaTypeId]) REFERENCES [MediaType] ([MediaTypeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)'], Based on the provided database schema information, List employees who report to Steve Johnson.\n ### SQL:\n ```sql\n SELECT LastName, FirstName\n FROM Employee\n WHERE ReportsTo = (SELECT EmployeeId FROM Employee WHERE LastName = 'Johnson' AND FirstName = 'Steve')\n```\nThis query will return the last name and first name of all employees who report to Steve Johnson.",
        "clean_sql_extracted": "SELECT LastName, FirstName FROM Employee WHERE ReportsTo = (SELECT EmployeeId FROM Employee WHERE LastName = 'Johnson' AND FirstName = 'Steve')"
    },
    {
        "db_id": "chinook",
        "natural_language_question": "Which tracks were composed by 'AC/DC'?",
        "gold_sql": "SELECT Name FROM Track WHERE Composer = 'AC/DC';",
        "raw_model_output": "Database Schema ['CREATE TABLE [Album]\\r\\n(\\r\\n    [AlbumId] INTEGER  NOT NULL,\\r\\n    [Title] NVARCHAR(160)  NOT NULL,\\r\\n    [ArtistId] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_Album] PRIMARY KEY  ([AlbumId]),\\r\\n    FOREIGN KEY ([ArtistId]) REFERENCES [Artist] ([ArtistId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Artist]\\r\\n(\\r\\n    [ArtistId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Artist] PRIMARY KEY  ([ArtistId])\\r\\n)', 'CREATE TABLE [Customer]\\r\\n(\\r\\n    [CustomerId] INTEGER  NOT NULL,\\r\\n    [FirstName] NVARCHAR(40)  NOT NULL,\\r\\n    [LastName] NVARCHAR(20)  NOT NULL,\\r\\n    [Company] NVARCHAR(80),\\r\\n    [Address] NVARCHAR(70),\\r\\n    [City] NVARCHAR(40),\\r\\n    [State] NVARCHAR(40),\\r\\n    [Country] NVARCHAR(40),\\r\\n    [PostalCode] NVARCHAR(10),\\r\\n    [Phone] NVARCHAR(24),\\r\\n    [Fax] NVARCHAR(24),\\r\\n    [Email] NVARCHAR(60)  NOT NULL,\\r\\n    [SupportRepId] INTEGER,\\r\\n    CONSTRAINT [PK_Customer] PRIMARY KEY  ([CustomerId]),\\r\\n    FOREIGN KEY ([SupportRepId]) REFERENCES [Employee] ([EmployeeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Employee]\\r\\n(\\r\\n    [EmployeeId] INTEGER  NOT NULL,\\r\\n    [LastName] NVARCHAR(20)  NOT NULL,\\r\\n    [FirstName] NVARCHAR(20)  NOT NULL,\\r\\n    [Title] NVARCHAR(30),\\r\\n    [ReportsTo] INTEGER,\\r\\n    [BirthDate] DATETIME,\\r\\n    [HireDate] DATETIME,\\r\\n    [Address] NVARCHAR(70),\\r\\n    [City] NVARCHAR(40),\\r\\n    [State] NVARCHAR(40),\\r\\n    [Country] NVARCHAR(40),\\r\\n    [PostalCode] NVARCHAR(10),\\r\\n    [Phone] NVARCHAR(24),\\r\\n    [Fax] NVARCHAR(24),\\r\\n    [Email] NVARCHAR(60),\\r\\n    CONSTRAINT [PK_Employee] PRIMARY KEY  ([EmployeeId]),\\r\\n    FOREIGN KEY ([ReportsTo]) REFERENCES [Employee] ([EmployeeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Genre]\\r\\n(\\r\\n    [GenreId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Genre] PRIMARY KEY  ([GenreId])\\r\\n)', 'CREATE TABLE [Invoice]\\r\\n(\\r\\n    [InvoiceId] INTEGER  NOT NULL,\\r\\n    [CustomerId] INTEGER  NOT NULL,\\r\\n    [InvoiceDate] DATETIME  NOT NULL,\\r\\n    [BillingAddress] NVARCHAR(70),\\r\\n    [BillingCity] NVARCHAR(40),\\r\\n    [BillingState] NVARCHAR(40),\\r\\n    [BillingCountry] NVARCHAR(40),\\r\\n    [BillingPostalCode] NVARCHAR(10),\\r\\n    [Total] NUMERIC(10,2)  NOT NULL,\\r\\n    CONSTRAINT [PK_Invoice] PRIMARY KEY  ([InvoiceId]),\\r\\n    FOREIGN KEY ([CustomerId]) REFERENCES [Customer] ([CustomerId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [InvoiceLine]\\r\\n(\\r\\n    [InvoiceLineId] INTEGER  NOT NULL,\\r\\n    [InvoiceId] INTEGER  NOT NULL,\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    [UnitPrice] NUMERIC(10,2)  NOT NULL,\\r\\n    [Quantity] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_InvoiceLine] PRIMARY KEY  ([InvoiceLineId]),\\r\\n    FOREIGN KEY ([InvoiceId]) REFERENCES [Invoice] ([InvoiceId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [MediaType]\\r\\n(\\r\\n    [MediaTypeId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_MediaType] PRIMARY KEY  ([MediaTypeId])\\r\\n)', 'CREATE TABLE [Playlist]\\r\\n(\\r\\n    [PlaylistId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Playlist] PRIMARY KEY  ([PlaylistId])\\r\\n)', 'CREATE TABLE [PlaylistTrack]\\r\\n(\\r\\n    [PlaylistId] INTEGER  NOT NULL,\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_PlaylistTrack] PRIMARY KEY  ([PlaylistId], [TrackId]),\\r\\n    FOREIGN KEY ([PlaylistId]) REFERENCES [Playlist] ([PlaylistId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Track]\\r\\n(\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(200)  NOT NULL,\\r\\n    [AlbumId] INTEGER,\\r\\n    [MediaTypeId] INTEGER  NOT NULL,\\r\\n    [GenreId] INTEGER,\\r\\n    [Composer] NVARCHAR(220),\\r\\n    [Milliseconds] INTEGER  NOT NULL,\\r\\n    [Bytes] INTEGER,\\r\\n    [UnitPrice] NUMERIC(10,2)  NOT NULL,\\r\\n    CONSTRAINT [PK_Track] PRIMARY KEY  ([TrackId]),\\r\\n    FOREIGN KEY ([AlbumId]) REFERENCES [Album] ([AlbumId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([GenreId]) REFERENCES [Genre] ([GenreId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([MediaTypeId]) REFERENCES [MediaType] ([MediaTypeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)'], Based on the provided database schema information, Which tracks were composed by 'AC/DC'?\n ### SQL:\n ```sql\n SELECT Name\n FROM Track\n WHERE Composer = 'AC/DC';\n```\nThis SQL query will return the names of all tracks in the `Track` table that have 'AC/DC' as the composer.",
        "clean_sql_extracted": "SELECT Name FROM Track WHERE Composer = 'AC/DC';"
    },
    {
        "db_id": "chinook",
        "natural_language_question": "Get the number of playlists available.",
        "gold_sql": "SELECT COUNT(*) FROM Playlist;",
        "raw_model_output": "Database Schema ['CREATE TABLE [Album]\\r\\n(\\r\\n    [AlbumId] INTEGER  NOT NULL,\\r\\n    [Title] NVARCHAR(160)  NOT NULL,\\r\\n    [ArtistId] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_Album] PRIMARY KEY  ([AlbumId]),\\r\\n    FOREIGN KEY ([ArtistId]) REFERENCES [Artist] ([ArtistId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Artist]\\r\\n(\\r\\n    [ArtistId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Artist] PRIMARY KEY  ([ArtistId])\\r\\n)', 'CREATE TABLE [Customer]\\r\\n(\\r\\n    [CustomerId] INTEGER  NOT NULL,\\r\\n    [FirstName] NVARCHAR(40)  NOT NULL,\\r\\n    [LastName] NVARCHAR(20)  NOT NULL,\\r\\n    [Company] NVARCHAR(80),\\r\\n    [Address] NVARCHAR(70),\\r\\n    [City] NVARCHAR(40),\\r\\n    [State] NVARCHAR(40),\\r\\n    [Country] NVARCHAR(40),\\r\\n    [PostalCode] NVARCHAR(10),\\r\\n    [Phone] NVARCHAR(24),\\r\\n    [Fax] NVARCHAR(24),\\r\\n    [Email] NVARCHAR(60)  NOT NULL,\\r\\n    [SupportRepId] INTEGER,\\r\\n    CONSTRAINT [PK_Customer] PRIMARY KEY  ([CustomerId]),\\r\\n    FOREIGN KEY ([SupportRepId]) REFERENCES [Employee] ([EmployeeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Employee]\\r\\n(\\r\\n    [EmployeeId] INTEGER  NOT NULL,\\r\\n    [LastName] NVARCHAR(20)  NOT NULL,\\r\\n    [FirstName] NVARCHAR(20)  NOT NULL,\\r\\n    [Title] NVARCHAR(30),\\r\\n    [ReportsTo] INTEGER,\\r\\n    [BirthDate] DATETIME,\\r\\n    [HireDate] DATETIME,\\r\\n    [Address] NVARCHAR(70),\\r\\n    [City] NVARCHAR(40),\\r\\n    [State] NVARCHAR(40),\\r\\n    [Country] NVARCHAR(40),\\r\\n    [PostalCode] NVARCHAR(10),\\r\\n    [Phone] NVARCHAR(24),\\r\\n    [Fax] NVARCHAR(24),\\r\\n    [Email] NVARCHAR(60),\\r\\n    CONSTRAINT [PK_Employee] PRIMARY KEY  ([EmployeeId]),\\r\\n    FOREIGN KEY ([ReportsTo]) REFERENCES [Employee] ([EmployeeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Genre]\\r\\n(\\r\\n    [GenreId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Genre] PRIMARY KEY  ([GenreId])\\r\\n)', 'CREATE TABLE [Invoice]\\r\\n(\\r\\n    [InvoiceId] INTEGER  NOT NULL,\\r\\n    [CustomerId] INTEGER  NOT NULL,\\r\\n    [InvoiceDate] DATETIME  NOT NULL,\\r\\n    [BillingAddress] NVARCHAR(70),\\r\\n    [BillingCity] NVARCHAR(40),\\r\\n    [BillingState] NVARCHAR(40),\\r\\n    [BillingCountry] NVARCHAR(40),\\r\\n    [BillingPostalCode] NVARCHAR(10),\\r\\n    [Total] NUMERIC(10,2)  NOT NULL,\\r\\n    CONSTRAINT [PK_Invoice] PRIMARY KEY  ([InvoiceId]),\\r\\n    FOREIGN KEY ([CustomerId]) REFERENCES [Customer] ([CustomerId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [InvoiceLine]\\r\\n(\\r\\n    [InvoiceLineId] INTEGER  NOT NULL,\\r\\n    [InvoiceId] INTEGER  NOT NULL,\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    [UnitPrice] NUMERIC(10,2)  NOT NULL,\\r\\n    [Quantity] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_InvoiceLine] PRIMARY KEY  ([InvoiceLineId]),\\r\\n    FOREIGN KEY ([InvoiceId]) REFERENCES [Invoice] ([InvoiceId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [MediaType]\\r\\n(\\r\\n    [MediaTypeId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_MediaType] PRIMARY KEY  ([MediaTypeId])\\r\\n)', 'CREATE TABLE [Playlist]\\r\\n(\\r\\n    [PlaylistId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Playlist] PRIMARY KEY  ([PlaylistId])\\r\\n)', 'CREATE TABLE [PlaylistTrack]\\r\\n(\\r\\n    [PlaylistId] INTEGER  NOT NULL,\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_PlaylistTrack] PRIMARY KEY  ([PlaylistId], [TrackId]),\\r\\n    FOREIGN KEY ([PlaylistId]) REFERENCES [Playlist] ([PlaylistId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Track]\\r\\n(\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(200)  NOT NULL,\\r\\n    [AlbumId] INTEGER,\\r\\n    [MediaTypeId] INTEGER  NOT NULL,\\r\\n    [GenreId] INTEGER,\\r\\n    [Composer] NVARCHAR(220),\\r\\n    [Milliseconds] INTEGER  NOT NULL,\\r\\n    [Bytes] INTEGER,\\r\\n    [UnitPrice] NUMERIC(10,2)  NOT NULL,\\r\\n    CONSTRAINT [PK_Track] PRIMARY KEY  ([TrackId]),\\r\\n    FOREIGN KEY ([AlbumId]) REFERENCES [Album] ([AlbumId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([GenreId]) REFERENCES [Genre] ([GenreId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([MediaTypeId]) REFERENCES [MediaType] ([MediaTypeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)'], Based on the provided database schema information, Get the number of playlists available.\n ### SQL:\n ```sql\n SELECT COUNT(*) FROM Playlist;\n```\nThis SQL query will return the number of records present in the Playlist table, which represents the number of playlists available.",
        "clean_sql_extracted": "SELECT COUNT(*) FROM Playlist;"
    },
    {
        "db_id": "chinook",
        "natural_language_question": "Which customers are from the USA and spent more than $30 total?",
        "gold_sql": "SELECT CustomerId FROM Customer WHERE Country = 'USA' AND CustomerId IN (SELECT CustomerId FROM Invoice GROUP BY CustomerId HAVING SUM(Total) > 30);",
        "raw_model_output": "Database Schema ['CREATE TABLE [Album]\\r\\n(\\r\\n    [AlbumId] INTEGER  NOT NULL,\\r\\n    [Title] NVARCHAR(160)  NOT NULL,\\r\\n    [ArtistId] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_Album] PRIMARY KEY  ([AlbumId]),\\r\\n    FOREIGN KEY ([ArtistId]) REFERENCES [Artist] ([ArtistId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Artist]\\r\\n(\\r\\n    [ArtistId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Artist] PRIMARY KEY  ([ArtistId])\\r\\n)', 'CREATE TABLE [Customer]\\r\\n(\\r\\n    [CustomerId] INTEGER  NOT NULL,\\r\\n    [FirstName] NVARCHAR(40)  NOT NULL,\\r\\n    [LastName] NVARCHAR(20)  NOT NULL,\\r\\n    [Company] NVARCHAR(80),\\r\\n    [Address] NVARCHAR(70),\\r\\n    [City] NVARCHAR(40),\\r\\n    [State] NVARCHAR(40),\\r\\n    [Country] NVARCHAR(40),\\r\\n    [PostalCode] NVARCHAR(10),\\r\\n    [Phone] NVARCHAR(24),\\r\\n    [Fax] NVARCHAR(24),\\r\\n    [Email] NVARCHAR(60)  NOT NULL,\\r\\n    [SupportRepId] INTEGER,\\r\\n    CONSTRAINT [PK_Customer] PRIMARY KEY  ([CustomerId]),\\r\\n    FOREIGN KEY ([SupportRepId]) REFERENCES [Employee] ([EmployeeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Employee]\\r\\n(\\r\\n    [EmployeeId] INTEGER  NOT NULL,\\r\\n    [LastName] NVARCHAR(20)  NOT NULL,\\r\\n    [FirstName] NVARCHAR(20)  NOT NULL,\\r\\n    [Title] NVARCHAR(30),\\r\\n    [ReportsTo] INTEGER,\\r\\n    [BirthDate] DATETIME,\\r\\n    [HireDate] DATETIME,\\r\\n    [Address] NVARCHAR(70),\\r\\n    [City] NVARCHAR(40),\\r\\n    [State] NVARCHAR(40),\\r\\n    [Country] NVARCHAR(40),\\r\\n    [PostalCode] NVARCHAR(10),\\r\\n    [Phone] NVARCHAR(24),\\r\\n    [Fax] NVARCHAR(24),\\r\\n    [Email] NVARCHAR(60),\\r\\n    CONSTRAINT [PK_Employee] PRIMARY KEY  ([EmployeeId]),\\r\\n    FOREIGN KEY ([ReportsTo]) REFERENCES [Employee] ([EmployeeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Genre]\\r\\n(\\r\\n    [GenreId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Genre] PRIMARY KEY  ([GenreId])\\r\\n)', 'CREATE TABLE [Invoice]\\r\\n(\\r\\n    [InvoiceId] INTEGER  NOT NULL,\\r\\n    [CustomerId] INTEGER  NOT NULL,\\r\\n    [InvoiceDate] DATETIME  NOT NULL,\\r\\n    [BillingAddress] NVARCHAR(70),\\r\\n    [BillingCity] NVARCHAR(40),\\r\\n    [BillingState] NVARCHAR(40),\\r\\n    [BillingCountry] NVARCHAR(40),\\r\\n    [BillingPostalCode] NVARCHAR(10),\\r\\n    [Total] NUMERIC(10,2)  NOT NULL,\\r\\n    CONSTRAINT [PK_Invoice] PRIMARY KEY  ([InvoiceId]),\\r\\n    FOREIGN KEY ([CustomerId]) REFERENCES [Customer] ([CustomerId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [InvoiceLine]\\r\\n(\\r\\n    [InvoiceLineId] INTEGER  NOT NULL,\\r\\n    [InvoiceId] INTEGER  NOT NULL,\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    [UnitPrice] NUMERIC(10,2)  NOT NULL,\\r\\n    [Quantity] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_InvoiceLine] PRIMARY KEY  ([InvoiceLineId]),\\r\\n    FOREIGN KEY ([InvoiceId]) REFERENCES [Invoice] ([InvoiceId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [MediaType]\\r\\n(\\r\\n    [MediaTypeId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_MediaType] PRIMARY KEY  ([MediaTypeId])\\r\\n)', 'CREATE TABLE [Playlist]\\r\\n(\\r\\n    [PlaylistId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Playlist] PRIMARY KEY  ([PlaylistId])\\r\\n)', 'CREATE TABLE [PlaylistTrack]\\r\\n(\\r\\n    [PlaylistId] INTEGER  NOT NULL,\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_PlaylistTrack] PRIMARY KEY  ([PlaylistId], [TrackId]),\\r\\n    FOREIGN KEY ([PlaylistId]) REFERENCES [Playlist] ([PlaylistId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Track]\\r\\n(\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(200)  NOT NULL,\\r\\n    [AlbumId] INTEGER,\\r\\n    [MediaTypeId] INTEGER  NOT NULL,\\r\\n    [GenreId] INTEGER,\\r\\n    [Composer] NVARCHAR(220),\\r\\n    [Milliseconds] INTEGER  NOT NULL,\\r\\n    [Bytes] INTEGER,\\r\\n    [UnitPrice] NUMERIC(10,2)  NOT NULL,\\r\\n    CONSTRAINT [PK_Track] PRIMARY KEY  ([TrackId]),\\r\\n    FOREIGN KEY ([AlbumId]) REFERENCES [Album] ([AlbumId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([GenreId]) REFERENCES [Genre] ([GenreId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([MediaTypeId]) REFERENCES [MediaType] ([MediaTypeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)'], Based on the provided database schema information, Which customers are from the USA and spent more than $30 total?\n ### SQL:\n ```sql\n SELECT c.FirstName, c.LastName, c.Country, SUM(i.Total) as TotalSpend\n FROM Customer c\n JOIN Invoice i ON c.CustomerId = i.CustomerId\n WHERE Country = 'USA'\n GROUP BY c.CustomerId, c.FirstName, c.LastName\n HAVING TotalSpend > 30\n```\nThis SQL query will return the first name, last name, and country of customers from the USA who have spent more than $30 in total on invoices.",
        "clean_sql_extracted": "SELECT c.FirstName, c.LastName, c.Country, SUM(i.Total) as TotalSpend FROM Customer c JOIN Invoice i ON c.CustomerId = i.CustomerId WHERE Country = 'USA' GROUP BY c.CustomerId, c.FirstName, c.LastName HAVING TotalSpend > 30"
    },
    {
        "db_id": "chinook",
        "natural_language_question": "Show track names and their respective album titles.",
        "gold_sql": "SELECT t.Name, a.Title FROM Track t JOIN Album a ON t.AlbumId = a.AlbumId;",
        "raw_model_output": "Database Schema ['CREATE TABLE [Album]\\r\\n(\\r\\n    [AlbumId] INTEGER  NOT NULL,\\r\\n    [Title] NVARCHAR(160)  NOT NULL,\\r\\n    [ArtistId] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_Album] PRIMARY KEY  ([AlbumId]),\\r\\n    FOREIGN KEY ([ArtistId]) REFERENCES [Artist] ([ArtistId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Artist]\\r\\n(\\r\\n    [ArtistId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Artist] PRIMARY KEY  ([ArtistId])\\r\\n)', 'CREATE TABLE [Customer]\\r\\n(\\r\\n    [CustomerId] INTEGER  NOT NULL,\\r\\n    [FirstName] NVARCHAR(40)  NOT NULL,\\r\\n    [LastName] NVARCHAR(20)  NOT NULL,\\r\\n    [Company] NVARCHAR(80),\\r\\n    [Address] NVARCHAR(70),\\r\\n    [City] NVARCHAR(40),\\r\\n    [State] NVARCHAR(40),\\r\\n    [Country] NVARCHAR(40),\\r\\n    [PostalCode] NVARCHAR(10),\\r\\n    [Phone] NVARCHAR(24),\\r\\n    [Fax] NVARCHAR(24),\\r\\n    [Email] NVARCHAR(60)  NOT NULL,\\r\\n    [SupportRepId] INTEGER,\\r\\n    CONSTRAINT [PK_Customer] PRIMARY KEY  ([CustomerId]),\\r\\n    FOREIGN KEY ([SupportRepId]) REFERENCES [Employee] ([EmployeeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Employee]\\r\\n(\\r\\n    [EmployeeId] INTEGER  NOT NULL,\\r\\n    [LastName] NVARCHAR(20)  NOT NULL,\\r\\n    [FirstName] NVARCHAR(20)  NOT NULL,\\r\\n    [Title] NVARCHAR(30),\\r\\n    [ReportsTo] INTEGER,\\r\\n    [BirthDate] DATETIME,\\r\\n    [HireDate] DATETIME,\\r\\n    [Address] NVARCHAR(70),\\r\\n    [City] NVARCHAR(40),\\r\\n    [State] NVARCHAR(40),\\r\\n    [Country] NVARCHAR(40),\\r\\n    [PostalCode] NVARCHAR(10),\\r\\n    [Phone] NVARCHAR(24),\\r\\n    [Fax] NVARCHAR(24),\\r\\n    [Email] NVARCHAR(60),\\r\\n    CONSTRAINT [PK_Employee] PRIMARY KEY  ([EmployeeId]),\\r\\n    FOREIGN KEY ([ReportsTo]) REFERENCES [Employee] ([EmployeeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Genre]\\r\\n(\\r\\n    [GenreId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Genre] PRIMARY KEY  ([GenreId])\\r\\n)', 'CREATE TABLE [Invoice]\\r\\n(\\r\\n    [InvoiceId] INTEGER  NOT NULL,\\r\\n    [CustomerId] INTEGER  NOT NULL,\\r\\n    [InvoiceDate] DATETIME  NOT NULL,\\r\\n    [BillingAddress] NVARCHAR(70),\\r\\n    [BillingCity] NVARCHAR(40),\\r\\n    [BillingState] NVARCHAR(40),\\r\\n    [BillingCountry] NVARCHAR(40),\\r\\n    [BillingPostalCode] NVARCHAR(10),\\r\\n    [Total] NUMERIC(10,2)  NOT NULL,\\r\\n    CONSTRAINT [PK_Invoice] PRIMARY KEY  ([InvoiceId]),\\r\\n    FOREIGN KEY ([CustomerId]) REFERENCES [Customer] ([CustomerId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [InvoiceLine]\\r\\n(\\r\\n    [InvoiceLineId] INTEGER  NOT NULL,\\r\\n    [InvoiceId] INTEGER  NOT NULL,\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    [UnitPrice] NUMERIC(10,2)  NOT NULL,\\r\\n    [Quantity] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_InvoiceLine] PRIMARY KEY  ([InvoiceLineId]),\\r\\n    FOREIGN KEY ([InvoiceId]) REFERENCES [Invoice] ([InvoiceId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [MediaType]\\r\\n(\\r\\n    [MediaTypeId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_MediaType] PRIMARY KEY  ([MediaTypeId])\\r\\n)', 'CREATE TABLE [Playlist]\\r\\n(\\r\\n    [PlaylistId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Playlist] PRIMARY KEY  ([PlaylistId])\\r\\n)', 'CREATE TABLE [PlaylistTrack]\\r\\n(\\r\\n    [PlaylistId] INTEGER  NOT NULL,\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_PlaylistTrack] PRIMARY KEY  ([PlaylistId], [TrackId]),\\r\\n    FOREIGN KEY ([PlaylistId]) REFERENCES [Playlist] ([PlaylistId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Track]\\r\\n(\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(200)  NOT NULL,\\r\\n    [AlbumId] INTEGER,\\r\\n    [MediaTypeId] INTEGER  NOT NULL,\\r\\n    [GenreId] INTEGER,\\r\\n    [Composer] NVARCHAR(220),\\r\\n    [Milliseconds] INTEGER  NOT NULL,\\r\\n    [Bytes] INTEGER,\\r\\n    [UnitPrice] NUMERIC(10,2)  NOT NULL,\\r\\n    CONSTRAINT [PK_Track] PRIMARY KEY  ([TrackId]),\\r\\n    FOREIGN KEY ([AlbumId]) REFERENCES [Album] ([AlbumId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([GenreId]) REFERENCES [Genre] ([GenreId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([MediaTypeId]) REFERENCES [MediaType] ([MediaTypeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)'], Based on the provided database schema information, Show track names and their respective album titles.\n ### SQL:\n ```sql\n SELECT Tracks.Name AS TrackName, Albums.Title AS AlbumTitle\n FROM Tracks\n INNER JOIN Albums ON Tracks.AlbumId = Albums.AlbumId\n```\nThis SQL query will return the track names and their respective album titles by joining the `Tracks` and `Albums` tables using their common `AlbumId` field.",
        "clean_sql_extracted": "SELECT Tracks.Name AS TrackName, Albums.Title AS AlbumTitle FROM Tracks INNER JOIN Albums ON Tracks.AlbumId = Albums.AlbumId"
    },
    {
        "db_id": "chinook",
        "natural_language_question": "Find the most recently hired employee.",
        "gold_sql": "SELECT FirstName, LastName FROM Employee ORDER BY HireDate DESC LIMIT 1;",
        "raw_model_output": "Database Schema ['CREATE TABLE [Album]\\r\\n(\\r\\n    [AlbumId] INTEGER  NOT NULL,\\r\\n    [Title] NVARCHAR(160)  NOT NULL,\\r\\n    [ArtistId] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_Album] PRIMARY KEY  ([AlbumId]),\\r\\n    FOREIGN KEY ([ArtistId]) REFERENCES [Artist] ([ArtistId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Artist]\\r\\n(\\r\\n    [ArtistId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Artist] PRIMARY KEY  ([ArtistId])\\r\\n)', 'CREATE TABLE [Customer]\\r\\n(\\r\\n    [CustomerId] INTEGER  NOT NULL,\\r\\n    [FirstName] NVARCHAR(40)  NOT NULL,\\r\\n    [LastName] NVARCHAR(20)  NOT NULL,\\r\\n    [Company] NVARCHAR(80),\\r\\n    [Address] NVARCHAR(70),\\r\\n    [City] NVARCHAR(40),\\r\\n    [State] NVARCHAR(40),\\r\\n    [Country] NVARCHAR(40),\\r\\n    [PostalCode] NVARCHAR(10),\\r\\n    [Phone] NVARCHAR(24),\\r\\n    [Fax] NVARCHAR(24),\\r\\n    [Email] NVARCHAR(60)  NOT NULL,\\r\\n    [SupportRepId] INTEGER,\\r\\n    CONSTRAINT [PK_Customer] PRIMARY KEY  ([CustomerId]),\\r\\n    FOREIGN KEY ([SupportRepId]) REFERENCES [Employee] ([EmployeeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Employee]\\r\\n(\\r\\n    [EmployeeId] INTEGER  NOT NULL,\\r\\n    [LastName] NVARCHAR(20)  NOT NULL,\\r\\n    [FirstName] NVARCHAR(20)  NOT NULL,\\r\\n    [Title] NVARCHAR(30),\\r\\n    [ReportsTo] INTEGER,\\r\\n    [BirthDate] DATETIME,\\r\\n    [HireDate] DATETIME,\\r\\n    [Address] NVARCHAR(70),\\r\\n    [City] NVARCHAR(40),\\r\\n    [State] NVARCHAR(40),\\r\\n    [Country] NVARCHAR(40),\\r\\n    [PostalCode] NVARCHAR(10),\\r\\n    [Phone] NVARCHAR(24),\\r\\n    [Fax] NVARCHAR(24),\\r\\n    [Email] NVARCHAR(60),\\r\\n    CONSTRAINT [PK_Employee] PRIMARY KEY  ([EmployeeId]),\\r\\n    FOREIGN KEY ([ReportsTo]) REFERENCES [Employee] ([EmployeeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Genre]\\r\\n(\\r\\n    [GenreId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Genre] PRIMARY KEY  ([GenreId])\\r\\n)', 'CREATE TABLE [Invoice]\\r\\n(\\r\\n    [InvoiceId] INTEGER  NOT NULL,\\r\\n    [CustomerId] INTEGER  NOT NULL,\\r\\n    [InvoiceDate] DATETIME  NOT NULL,\\r\\n    [BillingAddress] NVARCHAR(70),\\r\\n    [BillingCity] NVARCHAR(40),\\r\\n    [BillingState] NVARCHAR(40),\\r\\n    [BillingCountry] NVARCHAR(40),\\r\\n    [BillingPostalCode] NVARCHAR(10),\\r\\n    [Total] NUMERIC(10,2)  NOT NULL,\\r\\n    CONSTRAINT [PK_Invoice] PRIMARY KEY  ([InvoiceId]),\\r\\n    FOREIGN KEY ([CustomerId]) REFERENCES [Customer] ([CustomerId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [InvoiceLine]\\r\\n(\\r\\n    [InvoiceLineId] INTEGER  NOT NULL,\\r\\n    [InvoiceId] INTEGER  NOT NULL,\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    [UnitPrice] NUMERIC(10,2)  NOT NULL,\\r\\n    [Quantity] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_InvoiceLine] PRIMARY KEY  ([InvoiceLineId]),\\r\\n    FOREIGN KEY ([InvoiceId]) REFERENCES [Invoice] ([InvoiceId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [MediaType]\\r\\n(\\r\\n    [MediaTypeId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_MediaType] PRIMARY KEY  ([MediaTypeId])\\r\\n)', 'CREATE TABLE [Playlist]\\r\\n(\\r\\n    [PlaylistId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Playlist] PRIMARY KEY  ([PlaylistId])\\r\\n)', 'CREATE TABLE [PlaylistTrack]\\r\\n(\\r\\n    [PlaylistId] INTEGER  NOT NULL,\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_PlaylistTrack] PRIMARY KEY  ([PlaylistId], [TrackId]),\\r\\n    FOREIGN KEY ([PlaylistId]) REFERENCES [Playlist] ([PlaylistId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Track]\\r\\n(\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(200)  NOT NULL,\\r\\n    [AlbumId] INTEGER,\\r\\n    [MediaTypeId] INTEGER  NOT NULL,\\r\\n    [GenreId] INTEGER,\\r\\n    [Composer] NVARCHAR(220),\\r\\n    [Milliseconds] INTEGER  NOT NULL,\\r\\n    [Bytes] INTEGER,\\r\\n    [UnitPrice] NUMERIC(10,2)  NOT NULL,\\r\\n    CONSTRAINT [PK_Track] PRIMARY KEY  ([TrackId]),\\r\\n    FOREIGN KEY ([AlbumId]) REFERENCES [Album] ([AlbumId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([GenreId]) REFERENCES [Genre] ([GenreId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([MediaTypeId]) REFERENCES [MediaType] ([MediaTypeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)'], Based on the provided database schema information, Find the most recently hired employee.\n ### SQL:\n ```sql\n SELECT TOP 1 Employee.EmployeeId, Employee.FirstName, Employee.LastName, Employee.HireDate\n FROM Employee\n ORDER BY Employee.HireDate DESC\n```\nThis SQL query will return the most recently hired employee's EmployeeId, FirstName, LastName, and HireDate.",
        "clean_sql_extracted": "SELECT TOP 1 Employee.EmployeeId, Employee.FirstName, Employee.LastName, Employee.HireDate FROM Employee ORDER BY Employee.HireDate DESC"
    },
    {
        "db_id": "chinook",
        "natural_language_question": "List invoices with a total greater than the average invoice total.",
        "gold_sql": "SELECT InvoiceId, Total FROM Invoice WHERE Total > (SELECT AVG(Total) FROM Invoice);",
        "raw_model_output": "Database Schema ['CREATE TABLE [Album]\\r\\n(\\r\\n    [AlbumId] INTEGER  NOT NULL,\\r\\n    [Title] NVARCHAR(160)  NOT NULL,\\r\\n    [ArtistId] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_Album] PRIMARY KEY  ([AlbumId]),\\r\\n    FOREIGN KEY ([ArtistId]) REFERENCES [Artist] ([ArtistId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Artist]\\r\\n(\\r\\n    [ArtistId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Artist] PRIMARY KEY  ([ArtistId])\\r\\n)', 'CREATE TABLE [Customer]\\r\\n(\\r\\n    [CustomerId] INTEGER  NOT NULL,\\r\\n    [FirstName] NVARCHAR(40)  NOT NULL,\\r\\n    [LastName] NVARCHAR(20)  NOT NULL,\\r\\n    [Company] NVARCHAR(80),\\r\\n    [Address] NVARCHAR(70),\\r\\n    [City] NVARCHAR(40),\\r\\n    [State] NVARCHAR(40),\\r\\n    [Country] NVARCHAR(40),\\r\\n    [PostalCode] NVARCHAR(10),\\r\\n    [Phone] NVARCHAR(24),\\r\\n    [Fax] NVARCHAR(24),\\r\\n    [Email] NVARCHAR(60)  NOT NULL,\\r\\n    [SupportRepId] INTEGER,\\r\\n    CONSTRAINT [PK_Customer] PRIMARY KEY  ([CustomerId]),\\r\\n    FOREIGN KEY ([SupportRepId]) REFERENCES [Employee] ([EmployeeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Employee]\\r\\n(\\r\\n    [EmployeeId] INTEGER  NOT NULL,\\r\\n    [LastName] NVARCHAR(20)  NOT NULL,\\r\\n    [FirstName] NVARCHAR(20)  NOT NULL,\\r\\n    [Title] NVARCHAR(30),\\r\\n    [ReportsTo] INTEGER,\\r\\n    [BirthDate] DATETIME,\\r\\n    [HireDate] DATETIME,\\r\\n    [Address] NVARCHAR(70),\\r\\n    [City] NVARCHAR(40),\\r\\n    [State] NVARCHAR(40),\\r\\n    [Country] NVARCHAR(40),\\r\\n    [PostalCode] NVARCHAR(10),\\r\\n    [Phone] NVARCHAR(24),\\r\\n    [Fax] NVARCHAR(24),\\r\\n    [Email] NVARCHAR(60),\\r\\n    CONSTRAINT [PK_Employee] PRIMARY KEY  ([EmployeeId]),\\r\\n    FOREIGN KEY ([ReportsTo]) REFERENCES [Employee] ([EmployeeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Genre]\\r\\n(\\r\\n    [GenreId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Genre] PRIMARY KEY  ([GenreId])\\r\\n)', 'CREATE TABLE [Invoice]\\r\\n(\\r\\n    [InvoiceId] INTEGER  NOT NULL,\\r\\n    [CustomerId] INTEGER  NOT NULL,\\r\\n    [InvoiceDate] DATETIME  NOT NULL,\\r\\n    [BillingAddress] NVARCHAR(70),\\r\\n    [BillingCity] NVARCHAR(40),\\r\\n    [BillingState] NVARCHAR(40),\\r\\n    [BillingCountry] NVARCHAR(40),\\r\\n    [BillingPostalCode] NVARCHAR(10),\\r\\n    [Total] NUMERIC(10,2)  NOT NULL,\\r\\n    CONSTRAINT [PK_Invoice] PRIMARY KEY  ([InvoiceId]),\\r\\n    FOREIGN KEY ([CustomerId]) REFERENCES [Customer] ([CustomerId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [InvoiceLine]\\r\\n(\\r\\n    [InvoiceLineId] INTEGER  NOT NULL,\\r\\n    [InvoiceId] INTEGER  NOT NULL,\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    [UnitPrice] NUMERIC(10,2)  NOT NULL,\\r\\n    [Quantity] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_InvoiceLine] PRIMARY KEY  ([InvoiceLineId]),\\r\\n    FOREIGN KEY ([InvoiceId]) REFERENCES [Invoice] ([InvoiceId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [MediaType]\\r\\n(\\r\\n    [MediaTypeId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_MediaType] PRIMARY KEY  ([MediaTypeId])\\r\\n)', 'CREATE TABLE [Playlist]\\r\\n(\\r\\n    [PlaylistId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Playlist] PRIMARY KEY  ([PlaylistId])\\r\\n)', 'CREATE TABLE [PlaylistTrack]\\r\\n(\\r\\n    [PlaylistId] INTEGER  NOT NULL,\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_PlaylistTrack] PRIMARY KEY  ([PlaylistId], [TrackId]),\\r\\n    FOREIGN KEY ([PlaylistId]) REFERENCES [Playlist] ([PlaylistId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Track]\\r\\n(\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(200)  NOT NULL,\\r\\n    [AlbumId] INTEGER,\\r\\n    [MediaTypeId] INTEGER  NOT NULL,\\r\\n    [GenreId] INTEGER,\\r\\n    [Composer] NVARCHAR(220),\\r\\n    [Milliseconds] INTEGER  NOT NULL,\\r\\n    [Bytes] INTEGER,\\r\\n    [UnitPrice] NUMERIC(10,2)  NOT NULL,\\r\\n    CONSTRAINT [PK_Track] PRIMARY KEY  ([TrackId]),\\r\\n    FOREIGN KEY ([AlbumId]) REFERENCES [Album] ([AlbumId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([GenreId]) REFERENCES [Genre] ([GenreId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([MediaTypeId]) REFERENCES [MediaType] ([MediaTypeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)'], Based on the provided database schema information, List invoices with a total greater than the average invoice total.\n ### SQL:\n ```sql\n SELECT i.InvoiceId, i.Total\n FROM Invoice i\n WHERE i.Total > (\n    SELECT AVG(Total)\n    FROM Invoice\n)\n```\nThis SQL query selects the InvoiceId and Total columns from the Invoice table where the Total column value is greater than the average Total value across all rows in the Invoice table. The subquery in the WHERE clause calculates the average Total value.",
        "clean_sql_extracted": "SELECT i.InvoiceId, i.Total FROM Invoice i WHERE i.Total > ( SELECT AVG(Total) FROM Invoice )"
    },
    {
        "db_id": "chinook",
        "natural_language_question": "Which tracks have the word 'Love' in their title?",
        "gold_sql": "SELECT Name FROM Track WHERE Name LIKE '%Love%';",
        "raw_model_output": "Database Schema ['CREATE TABLE [Album]\\r\\n(\\r\\n    [AlbumId] INTEGER  NOT NULL,\\r\\n    [Title] NVARCHAR(160)  NOT NULL,\\r\\n    [ArtistId] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_Album] PRIMARY KEY  ([AlbumId]),\\r\\n    FOREIGN KEY ([ArtistId]) REFERENCES [Artist] ([ArtistId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Artist]\\r\\n(\\r\\n    [ArtistId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Artist] PRIMARY KEY  ([ArtistId])\\r\\n)', 'CREATE TABLE [Customer]\\r\\n(\\r\\n    [CustomerId] INTEGER  NOT NULL,\\r\\n    [FirstName] NVARCHAR(40)  NOT NULL,\\r\\n    [LastName] NVARCHAR(20)  NOT NULL,\\r\\n    [Company] NVARCHAR(80),\\r\\n    [Address] NVARCHAR(70),\\r\\n    [City] NVARCHAR(40),\\r\\n    [State] NVARCHAR(40),\\r\\n    [Country] NVARCHAR(40),\\r\\n    [PostalCode] NVARCHAR(10),\\r\\n    [Phone] NVARCHAR(24),\\r\\n    [Fax] NVARCHAR(24),\\r\\n    [Email] NVARCHAR(60)  NOT NULL,\\r\\n    [SupportRepId] INTEGER,\\r\\n    CONSTRAINT [PK_Customer] PRIMARY KEY  ([CustomerId]),\\r\\n    FOREIGN KEY ([SupportRepId]) REFERENCES [Employee] ([EmployeeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Employee]\\r\\n(\\r\\n    [EmployeeId] INTEGER  NOT NULL,\\r\\n    [LastName] NVARCHAR(20)  NOT NULL,\\r\\n    [FirstName] NVARCHAR(20)  NOT NULL,\\r\\n    [Title] NVARCHAR(30),\\r\\n    [ReportsTo] INTEGER,\\r\\n    [BirthDate] DATETIME,\\r\\n    [HireDate] DATETIME,\\r\\n    [Address] NVARCHAR(70),\\r\\n    [City] NVARCHAR(40),\\r\\n    [State] NVARCHAR(40),\\r\\n    [Country] NVARCHAR(40),\\r\\n    [PostalCode] NVARCHAR(10),\\r\\n    [Phone] NVARCHAR(24),\\r\\n    [Fax] NVARCHAR(24),\\r\\n    [Email] NVARCHAR(60),\\r\\n    CONSTRAINT [PK_Employee] PRIMARY KEY  ([EmployeeId]),\\r\\n    FOREIGN KEY ([ReportsTo]) REFERENCES [Employee] ([EmployeeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Genre]\\r\\n(\\r\\n    [GenreId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Genre] PRIMARY KEY  ([GenreId])\\r\\n)', 'CREATE TABLE [Invoice]\\r\\n(\\r\\n    [InvoiceId] INTEGER  NOT NULL,\\r\\n    [CustomerId] INTEGER  NOT NULL,\\r\\n    [InvoiceDate] DATETIME  NOT NULL,\\r\\n    [BillingAddress] NVARCHAR(70),\\r\\n    [BillingCity] NVARCHAR(40),\\r\\n    [BillingState] NVARCHAR(40),\\r\\n    [BillingCountry] NVARCHAR(40),\\r\\n    [BillingPostalCode] NVARCHAR(10),\\r\\n    [Total] NUMERIC(10,2)  NOT NULL,\\r\\n    CONSTRAINT [PK_Invoice] PRIMARY KEY  ([InvoiceId]),\\r\\n    FOREIGN KEY ([CustomerId]) REFERENCES [Customer] ([CustomerId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [InvoiceLine]\\r\\n(\\r\\n    [InvoiceLineId] INTEGER  NOT NULL,\\r\\n    [InvoiceId] INTEGER  NOT NULL,\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    [UnitPrice] NUMERIC(10,2)  NOT NULL,\\r\\n    [Quantity] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_InvoiceLine] PRIMARY KEY  ([InvoiceLineId]),\\r\\n    FOREIGN KEY ([InvoiceId]) REFERENCES [Invoice] ([InvoiceId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [MediaType]\\r\\n(\\r\\n    [MediaTypeId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_MediaType] PRIMARY KEY  ([MediaTypeId])\\r\\n)', 'CREATE TABLE [Playlist]\\r\\n(\\r\\n    [PlaylistId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Playlist] PRIMARY KEY  ([PlaylistId])\\r\\n)', 'CREATE TABLE [PlaylistTrack]\\r\\n(\\r\\n    [PlaylistId] INTEGER  NOT NULL,\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_PlaylistTrack] PRIMARY KEY  ([PlaylistId], [TrackId]),\\r\\n    FOREIGN KEY ([PlaylistId]) REFERENCES [Playlist] ([PlaylistId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Track]\\r\\n(\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(200)  NOT NULL,\\r\\n    [AlbumId] INTEGER,\\r\\n    [MediaTypeId] INTEGER  NOT NULL,\\r\\n    [GenreId] INTEGER,\\r\\n    [Composer] NVARCHAR(220),\\r\\n    [Milliseconds] INTEGER  NOT NULL,\\r\\n    [Bytes] INTEGER,\\r\\n    [UnitPrice] NUMERIC(10,2)  NOT NULL,\\r\\n    CONSTRAINT [PK_Track] PRIMARY KEY  ([TrackId]),\\r\\n    FOREIGN KEY ([AlbumId]) REFERENCES [Album] ([AlbumId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([GenreId]) REFERENCES [Genre] ([GenreId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([MediaTypeId]) REFERENCES [MediaType] ([MediaTypeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)'], Based on the provided database schema information, Which tracks have the word 'Love' in their title?\n ### SQL:\n ```sql\n SELECT TrackId, Name\n FROM Track\n WHERE Name LIKE '%Love%'\n```\nThis SQL query will return the TrackId and Name of all tracks in the Track table that have the word 'Love' in their title.",
        "clean_sql_extracted": "SELECT TrackId, Name FROM Track WHERE Name LIKE '%Love%'"
    },
    {
        "db_id": "chinook",
        "natural_language_question": "Find customers who have purchased tracks by 'Queen'.",
        "gold_sql": "SELECT DISTINCT c.CustomerId FROM Customer c JOIN Invoice i ON c.CustomerId = i.CustomerId JOIN InvoiceLine il ON i.InvoiceId = il.InvoiceId JOIN Track t ON il.TrackId = t.TrackId WHERE t.Composer = 'Queen';",
        "raw_model_output": "Database Schema ['CREATE TABLE [Album]\\r\\n(\\r\\n    [AlbumId] INTEGER  NOT NULL,\\r\\n    [Title] NVARCHAR(160)  NOT NULL,\\r\\n    [ArtistId] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_Album] PRIMARY KEY  ([AlbumId]),\\r\\n    FOREIGN KEY ([ArtistId]) REFERENCES [Artist] ([ArtistId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Artist]\\r\\n(\\r\\n    [ArtistId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Artist] PRIMARY KEY  ([ArtistId])\\r\\n)', 'CREATE TABLE [Customer]\\r\\n(\\r\\n    [CustomerId] INTEGER  NOT NULL,\\r\\n    [FirstName] NVARCHAR(40)  NOT NULL,\\r\\n    [LastName] NVARCHAR(20)  NOT NULL,\\r\\n    [Company] NVARCHAR(80),\\r\\n    [Address] NVARCHAR(70),\\r\\n    [City] NVARCHAR(40),\\r\\n    [State] NVARCHAR(40),\\r\\n    [Country] NVARCHAR(40),\\r\\n    [PostalCode] NVARCHAR(10),\\r\\n    [Phone] NVARCHAR(24),\\r\\n    [Fax] NVARCHAR(24),\\r\\n    [Email] NVARCHAR(60)  NOT NULL,\\r\\n    [SupportRepId] INTEGER,\\r\\n    CONSTRAINT [PK_Customer] PRIMARY KEY  ([CustomerId]),\\r\\n    FOREIGN KEY ([SupportRepId]) REFERENCES [Employee] ([EmployeeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Employee]\\r\\n(\\r\\n    [EmployeeId] INTEGER  NOT NULL,\\r\\n    [LastName] NVARCHAR(20)  NOT NULL,\\r\\n    [FirstName] NVARCHAR(20)  NOT NULL,\\r\\n    [Title] NVARCHAR(30),\\r\\n    [ReportsTo] INTEGER,\\r\\n    [BirthDate] DATETIME,\\r\\n    [HireDate] DATETIME,\\r\\n    [Address] NVARCHAR(70),\\r\\n    [City] NVARCHAR(40),\\r\\n    [State] NVARCHAR(40),\\r\\n    [Country] NVARCHAR(40),\\r\\n    [PostalCode] NVARCHAR(10),\\r\\n    [Phone] NVARCHAR(24),\\r\\n    [Fax] NVARCHAR(24),\\r\\n    [Email] NVARCHAR(60),\\r\\n    CONSTRAINT [PK_Employee] PRIMARY KEY  ([EmployeeId]),\\r\\n    FOREIGN KEY ([ReportsTo]) REFERENCES [Employee] ([EmployeeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Genre]\\r\\n(\\r\\n    [GenreId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Genre] PRIMARY KEY  ([GenreId])\\r\\n)', 'CREATE TABLE [Invoice]\\r\\n(\\r\\n    [InvoiceId] INTEGER  NOT NULL,\\r\\n    [CustomerId] INTEGER  NOT NULL,\\r\\n    [InvoiceDate] DATETIME  NOT NULL,\\r\\n    [BillingAddress] NVARCHAR(70),\\r\\n    [BillingCity] NVARCHAR(40),\\r\\n    [BillingState] NVARCHAR(40),\\r\\n    [BillingCountry] NVARCHAR(40),\\r\\n    [BillingPostalCode] NVARCHAR(10),\\r\\n    [Total] NUMERIC(10,2)  NOT NULL,\\r\\n    CONSTRAINT [PK_Invoice] PRIMARY KEY  ([InvoiceId]),\\r\\n    FOREIGN KEY ([CustomerId]) REFERENCES [Customer] ([CustomerId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [InvoiceLine]\\r\\n(\\r\\n    [InvoiceLineId] INTEGER  NOT NULL,\\r\\n    [InvoiceId] INTEGER  NOT NULL,\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    [UnitPrice] NUMERIC(10,2)  NOT NULL,\\r\\n    [Quantity] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_InvoiceLine] PRIMARY KEY  ([InvoiceLineId]),\\r\\n    FOREIGN KEY ([InvoiceId]) REFERENCES [Invoice] ([InvoiceId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [MediaType]\\r\\n(\\r\\n    [MediaTypeId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_MediaType] PRIMARY KEY  ([MediaTypeId])\\r\\n)', 'CREATE TABLE [Playlist]\\r\\n(\\r\\n    [PlaylistId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Playlist] PRIMARY KEY  ([PlaylistId])\\r\\n)', 'CREATE TABLE [PlaylistTrack]\\r\\n(\\r\\n    [PlaylistId] INTEGER  NOT NULL,\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_PlaylistTrack] PRIMARY KEY  ([PlaylistId], [TrackId]),\\r\\n    FOREIGN KEY ([PlaylistId]) REFERENCES [Playlist] ([PlaylistId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Track]\\r\\n(\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(200)  NOT NULL,\\r\\n    [AlbumId] INTEGER,\\r\\n    [MediaTypeId] INTEGER  NOT NULL,\\r\\n    [GenreId] INTEGER,\\r\\n    [Composer] NVARCHAR(220),\\r\\n    [Milliseconds] INTEGER  NOT NULL,\\r\\n    [Bytes] INTEGER,\\r\\n    [UnitPrice] NUMERIC(10,2)  NOT NULL,\\r\\n    CONSTRAINT [PK_Track] PRIMARY KEY  ([TrackId]),\\r\\n    FOREIGN KEY ([AlbumId]) REFERENCES [Album] ([AlbumId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([GenreId]) REFERENCES [Genre] ([GenreId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([MediaTypeId]) REFERENCES [MediaType] ([MediaTypeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)'], Based on the provided database schema information, Find customers who have purchased tracks by 'Queen'.\n ### SQL:\n ```sql\n SELECT C.FirstName, C.LastName\n FROM Customer C\n INNER JOIN Invoice I ON C.CustomerId = I.CustomerId\n INNER JOIN InvoiceLine IL ON I.InvoiceId = IL.InvoiceId\n INNER JOIN Track T ON IL.TrackId = T.TrackId\n WHERE T.Name LIKE '%Queen%'\n```\nThis SQL query will return the first and last names of customers who have purchased tracks by the band 'Queen'. The query uses inner joins to connect the Customer, Invoice, InvoiceLine, and Track tables, and filters the results using the LIKE operator to search for the band name 'Queen' in the Track table.",
        "clean_sql_extracted": "SELECT C.FirstName, C.LastName FROM Customer C INNER JOIN Invoice I ON C.CustomerId = I.CustomerId INNER JOIN InvoiceLine IL ON I.InvoiceId = IL.InvoiceId INNER JOIN Track T ON IL.TrackId = T.TrackId WHERE T.Name LIKE '%Queen%'"
    },
    {
        "db_id": "chinook",
        "natural_language_question": "List all media types available.",
        "gold_sql": "SELECT Name FROM MediaType;",
        "raw_model_output": "Database Schema ['CREATE TABLE [Album]\\r\\n(\\r\\n    [AlbumId] INTEGER  NOT NULL,\\r\\n    [Title] NVARCHAR(160)  NOT NULL,\\r\\n    [ArtistId] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_Album] PRIMARY KEY  ([AlbumId]),\\r\\n    FOREIGN KEY ([ArtistId]) REFERENCES [Artist] ([ArtistId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Artist]\\r\\n(\\r\\n    [ArtistId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Artist] PRIMARY KEY  ([ArtistId])\\r\\n)', 'CREATE TABLE [Customer]\\r\\n(\\r\\n    [CustomerId] INTEGER  NOT NULL,\\r\\n    [FirstName] NVARCHAR(40)  NOT NULL,\\r\\n    [LastName] NVARCHAR(20)  NOT NULL,\\r\\n    [Company] NVARCHAR(80),\\r\\n    [Address] NVARCHAR(70),\\r\\n    [City] NVARCHAR(40),\\r\\n    [State] NVARCHAR(40),\\r\\n    [Country] NVARCHAR(40),\\r\\n    [PostalCode] NVARCHAR(10),\\r\\n    [Phone] NVARCHAR(24),\\r\\n    [Fax] NVARCHAR(24),\\r\\n    [Email] NVARCHAR(60)  NOT NULL,\\r\\n    [SupportRepId] INTEGER,\\r\\n    CONSTRAINT [PK_Customer] PRIMARY KEY  ([CustomerId]),\\r\\n    FOREIGN KEY ([SupportRepId]) REFERENCES [Employee] ([EmployeeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Employee]\\r\\n(\\r\\n    [EmployeeId] INTEGER  NOT NULL,\\r\\n    [LastName] NVARCHAR(20)  NOT NULL,\\r\\n    [FirstName] NVARCHAR(20)  NOT NULL,\\r\\n    [Title] NVARCHAR(30),\\r\\n    [ReportsTo] INTEGER,\\r\\n    [BirthDate] DATETIME,\\r\\n    [HireDate] DATETIME,\\r\\n    [Address] NVARCHAR(70),\\r\\n    [City] NVARCHAR(40),\\r\\n    [State] NVARCHAR(40),\\r\\n    [Country] NVARCHAR(40),\\r\\n    [PostalCode] NVARCHAR(10),\\r\\n    [Phone] NVARCHAR(24),\\r\\n    [Fax] NVARCHAR(24),\\r\\n    [Email] NVARCHAR(60),\\r\\n    CONSTRAINT [PK_Employee] PRIMARY KEY  ([EmployeeId]),\\r\\n    FOREIGN KEY ([ReportsTo]) REFERENCES [Employee] ([EmployeeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Genre]\\r\\n(\\r\\n    [GenreId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Genre] PRIMARY KEY  ([GenreId])\\r\\n)', 'CREATE TABLE [Invoice]\\r\\n(\\r\\n    [InvoiceId] INTEGER  NOT NULL,\\r\\n    [CustomerId] INTEGER  NOT NULL,\\r\\n    [InvoiceDate] DATETIME  NOT NULL,\\r\\n    [BillingAddress] NVARCHAR(70),\\r\\n    [BillingCity] NVARCHAR(40),\\r\\n    [BillingState] NVARCHAR(40),\\r\\n    [BillingCountry] NVARCHAR(40),\\r\\n    [BillingPostalCode] NVARCHAR(10),\\r\\n    [Total] NUMERIC(10,2)  NOT NULL,\\r\\n    CONSTRAINT [PK_Invoice] PRIMARY KEY  ([InvoiceId]),\\r\\n    FOREIGN KEY ([CustomerId]) REFERENCES [Customer] ([CustomerId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [InvoiceLine]\\r\\n(\\r\\n    [InvoiceLineId] INTEGER  NOT NULL,\\r\\n    [InvoiceId] INTEGER  NOT NULL,\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    [UnitPrice] NUMERIC(10,2)  NOT NULL,\\r\\n    [Quantity] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_InvoiceLine] PRIMARY KEY  ([InvoiceLineId]),\\r\\n    FOREIGN KEY ([InvoiceId]) REFERENCES [Invoice] ([InvoiceId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [MediaType]\\r\\n(\\r\\n    [MediaTypeId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_MediaType] PRIMARY KEY  ([MediaTypeId])\\r\\n)', 'CREATE TABLE [Playlist]\\r\\n(\\r\\n    [PlaylistId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Playlist] PRIMARY KEY  ([PlaylistId])\\r\\n)', 'CREATE TABLE [PlaylistTrack]\\r\\n(\\r\\n    [PlaylistId] INTEGER  NOT NULL,\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_PlaylistTrack] PRIMARY KEY  ([PlaylistId], [TrackId]),\\r\\n    FOREIGN KEY ([PlaylistId]) REFERENCES [Playlist] ([PlaylistId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Track]\\r\\n(\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(200)  NOT NULL,\\r\\n    [AlbumId] INTEGER,\\r\\n    [MediaTypeId] INTEGER  NOT NULL,\\r\\n    [GenreId] INTEGER,\\r\\n    [Composer] NVARCHAR(220),\\r\\n    [Milliseconds] INTEGER  NOT NULL,\\r\\n    [Bytes] INTEGER,\\r\\n    [UnitPrice] NUMERIC(10,2)  NOT NULL,\\r\\n    CONSTRAINT [PK_Track] PRIMARY KEY  ([TrackId]),\\r\\n    FOREIGN KEY ([AlbumId]) REFERENCES [Album] ([AlbumId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([GenreId]) REFERENCES [Genre] ([GenreId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([MediaTypeId]) REFERENCES [MediaType] ([MediaTypeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)'], Based on the provided database schema information, List all media types available.\n ### SQL:\n ```sql\n SELECT Name FROM MediaType;\n```\nThis SQL query will return all the media types available in the database by selecting the `Name` column from the `MediaType` table.",
        "clean_sql_extracted": "SELECT Name FROM MediaType;"
    },
    {
        "db_id": "chinook",
        "natural_language_question": "Which city has the most customers?",
        "gold_sql": "SELECT City FROM Customer GROUP BY City ORDER BY COUNT(*) DESC LIMIT 1;",
        "raw_model_output": "Database Schema ['CREATE TABLE [Album]\\r\\n(\\r\\n    [AlbumId] INTEGER  NOT NULL,\\r\\n    [Title] NVARCHAR(160)  NOT NULL,\\r\\n    [ArtistId] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_Album] PRIMARY KEY  ([AlbumId]),\\r\\n    FOREIGN KEY ([ArtistId]) REFERENCES [Artist] ([ArtistId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Artist]\\r\\n(\\r\\n    [ArtistId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Artist] PRIMARY KEY  ([ArtistId])\\r\\n)', 'CREATE TABLE [Customer]\\r\\n(\\r\\n    [CustomerId] INTEGER  NOT NULL,\\r\\n    [FirstName] NVARCHAR(40)  NOT NULL,\\r\\n    [LastName] NVARCHAR(20)  NOT NULL,\\r\\n    [Company] NVARCHAR(80),\\r\\n    [Address] NVARCHAR(70),\\r\\n    [City] NVARCHAR(40),\\r\\n    [State] NVARCHAR(40),\\r\\n    [Country] NVARCHAR(40),\\r\\n    [PostalCode] NVARCHAR(10),\\r\\n    [Phone] NVARCHAR(24),\\r\\n    [Fax] NVARCHAR(24),\\r\\n    [Email] NVARCHAR(60)  NOT NULL,\\r\\n    [SupportRepId] INTEGER,\\r\\n    CONSTRAINT [PK_Customer] PRIMARY KEY  ([CustomerId]),\\r\\n    FOREIGN KEY ([SupportRepId]) REFERENCES [Employee] ([EmployeeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Employee]\\r\\n(\\r\\n    [EmployeeId] INTEGER  NOT NULL,\\r\\n    [LastName] NVARCHAR(20)  NOT NULL,\\r\\n    [FirstName] NVARCHAR(20)  NOT NULL,\\r\\n    [Title] NVARCHAR(30),\\r\\n    [ReportsTo] INTEGER,\\r\\n    [BirthDate] DATETIME,\\r\\n    [HireDate] DATETIME,\\r\\n    [Address] NVARCHAR(70),\\r\\n    [City] NVARCHAR(40),\\r\\n    [State] NVARCHAR(40),\\r\\n    [Country] NVARCHAR(40),\\r\\n    [PostalCode] NVARCHAR(10),\\r\\n    [Phone] NVARCHAR(24),\\r\\n    [Fax] NVARCHAR(24),\\r\\n    [Email] NVARCHAR(60),\\r\\n    CONSTRAINT [PK_Employee] PRIMARY KEY  ([EmployeeId]),\\r\\n    FOREIGN KEY ([ReportsTo]) REFERENCES [Employee] ([EmployeeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Genre]\\r\\n(\\r\\n    [GenreId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Genre] PRIMARY KEY  ([GenreId])\\r\\n)', 'CREATE TABLE [Invoice]\\r\\n(\\r\\n    [InvoiceId] INTEGER  NOT NULL,\\r\\n    [CustomerId] INTEGER  NOT NULL,\\r\\n    [InvoiceDate] DATETIME  NOT NULL,\\r\\n    [BillingAddress] NVARCHAR(70),\\r\\n    [BillingCity] NVARCHAR(40),\\r\\n    [BillingState] NVARCHAR(40),\\r\\n    [BillingCountry] NVARCHAR(40),\\r\\n    [BillingPostalCode] NVARCHAR(10),\\r\\n    [Total] NUMERIC(10,2)  NOT NULL,\\r\\n    CONSTRAINT [PK_Invoice] PRIMARY KEY  ([InvoiceId]),\\r\\n    FOREIGN KEY ([CustomerId]) REFERENCES [Customer] ([CustomerId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [InvoiceLine]\\r\\n(\\r\\n    [InvoiceLineId] INTEGER  NOT NULL,\\r\\n    [InvoiceId] INTEGER  NOT NULL,\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    [UnitPrice] NUMERIC(10,2)  NOT NULL,\\r\\n    [Quantity] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_InvoiceLine] PRIMARY KEY  ([InvoiceLineId]),\\r\\n    FOREIGN KEY ([InvoiceId]) REFERENCES [Invoice] ([InvoiceId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [MediaType]\\r\\n(\\r\\n    [MediaTypeId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_MediaType] PRIMARY KEY  ([MediaTypeId])\\r\\n)', 'CREATE TABLE [Playlist]\\r\\n(\\r\\n    [PlaylistId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Playlist] PRIMARY KEY  ([PlaylistId])\\r\\n)', 'CREATE TABLE [PlaylistTrack]\\r\\n(\\r\\n    [PlaylistId] INTEGER  NOT NULL,\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_PlaylistTrack] PRIMARY KEY  ([PlaylistId], [TrackId]),\\r\\n    FOREIGN KEY ([PlaylistId]) REFERENCES [Playlist] ([PlaylistId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Track]\\r\\n(\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(200)  NOT NULL,\\r\\n    [AlbumId] INTEGER,\\r\\n    [MediaTypeId] INTEGER  NOT NULL,\\r\\n    [GenreId] INTEGER,\\r\\n    [Composer] NVARCHAR(220),\\r\\n    [Milliseconds] INTEGER  NOT NULL,\\r\\n    [Bytes] INTEGER,\\r\\n    [UnitPrice] NUMERIC(10,2)  NOT NULL,\\r\\n    CONSTRAINT [PK_Track] PRIMARY KEY  ([TrackId]),\\r\\n    FOREIGN KEY ([AlbumId]) REFERENCES [Album] ([AlbumId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([GenreId]) REFERENCES [Genre] ([GenreId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([MediaTypeId]) REFERENCES [MediaType] ([MediaTypeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)'], Based on the provided database schema information, Which city has the most customers?\n ### SQL:\n ```sql\n SELECT City, COUNT(*) as NumCustomers\n FROM Customer\n GROUP BY City\n ORDER BY NumCustomers DESC\n LIMIT 1;\n```\nThis SQL query will return the city with the most customers by grouping all the customers by their city, counting the number of customers in each city, ordering the results in descending order based on the number of customers, and returning the first row which will be the city with the most customers.",
        "clean_sql_extracted": "SELECT City, COUNT(*) as NumCustomers FROM Customer GROUP BY City ORDER BY NumCustomers DESC LIMIT 1;"
    },
    {
        "db_id": "chinook",
        "natural_language_question": "Find all employees who are not managers.",
        "gold_sql": "SELECT FirstName, LastName FROM Employee WHERE ReportsTo IS NOT NULL;",
        "raw_model_output": "Database Schema ['CREATE TABLE [Album]\\r\\n(\\r\\n    [AlbumId] INTEGER  NOT NULL,\\r\\n    [Title] NVARCHAR(160)  NOT NULL,\\r\\n    [ArtistId] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_Album] PRIMARY KEY  ([AlbumId]),\\r\\n    FOREIGN KEY ([ArtistId]) REFERENCES [Artist] ([ArtistId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Artist]\\r\\n(\\r\\n    [ArtistId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Artist] PRIMARY KEY  ([ArtistId])\\r\\n)', 'CREATE TABLE [Customer]\\r\\n(\\r\\n    [CustomerId] INTEGER  NOT NULL,\\r\\n    [FirstName] NVARCHAR(40)  NOT NULL,\\r\\n    [LastName] NVARCHAR(20)  NOT NULL,\\r\\n    [Company] NVARCHAR(80),\\r\\n    [Address] NVARCHAR(70),\\r\\n    [City] NVARCHAR(40),\\r\\n    [State] NVARCHAR(40),\\r\\n    [Country] NVARCHAR(40),\\r\\n    [PostalCode] NVARCHAR(10),\\r\\n    [Phone] NVARCHAR(24),\\r\\n    [Fax] NVARCHAR(24),\\r\\n    [Email] NVARCHAR(60)  NOT NULL,\\r\\n    [SupportRepId] INTEGER,\\r\\n    CONSTRAINT [PK_Customer] PRIMARY KEY  ([CustomerId]),\\r\\n    FOREIGN KEY ([SupportRepId]) REFERENCES [Employee] ([EmployeeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Employee]\\r\\n(\\r\\n    [EmployeeId] INTEGER  NOT NULL,\\r\\n    [LastName] NVARCHAR(20)  NOT NULL,\\r\\n    [FirstName] NVARCHAR(20)  NOT NULL,\\r\\n    [Title] NVARCHAR(30),\\r\\n    [ReportsTo] INTEGER,\\r\\n    [BirthDate] DATETIME,\\r\\n    [HireDate] DATETIME,\\r\\n    [Address] NVARCHAR(70),\\r\\n    [City] NVARCHAR(40),\\r\\n    [State] NVARCHAR(40),\\r\\n    [Country] NVARCHAR(40),\\r\\n    [PostalCode] NVARCHAR(10),\\r\\n    [Phone] NVARCHAR(24),\\r\\n    [Fax] NVARCHAR(24),\\r\\n    [Email] NVARCHAR(60),\\r\\n    CONSTRAINT [PK_Employee] PRIMARY KEY  ([EmployeeId]),\\r\\n    FOREIGN KEY ([ReportsTo]) REFERENCES [Employee] ([EmployeeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Genre]\\r\\n(\\r\\n    [GenreId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Genre] PRIMARY KEY  ([GenreId])\\r\\n)', 'CREATE TABLE [Invoice]\\r\\n(\\r\\n    [InvoiceId] INTEGER  NOT NULL,\\r\\n    [CustomerId] INTEGER  NOT NULL,\\r\\n    [InvoiceDate] DATETIME  NOT NULL,\\r\\n    [BillingAddress] NVARCHAR(70),\\r\\n    [BillingCity] NVARCHAR(40),\\r\\n    [BillingState] NVARCHAR(40),\\r\\n    [BillingCountry] NVARCHAR(40),\\r\\n    [BillingPostalCode] NVARCHAR(10),\\r\\n    [Total] NUMERIC(10,2)  NOT NULL,\\r\\n    CONSTRAINT [PK_Invoice] PRIMARY KEY  ([InvoiceId]),\\r\\n    FOREIGN KEY ([CustomerId]) REFERENCES [Customer] ([CustomerId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [InvoiceLine]\\r\\n(\\r\\n    [InvoiceLineId] INTEGER  NOT NULL,\\r\\n    [InvoiceId] INTEGER  NOT NULL,\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    [UnitPrice] NUMERIC(10,2)  NOT NULL,\\r\\n    [Quantity] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_InvoiceLine] PRIMARY KEY  ([InvoiceLineId]),\\r\\n    FOREIGN KEY ([InvoiceId]) REFERENCES [Invoice] ([InvoiceId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [MediaType]\\r\\n(\\r\\n    [MediaTypeId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_MediaType] PRIMARY KEY  ([MediaTypeId])\\r\\n)', 'CREATE TABLE [Playlist]\\r\\n(\\r\\n    [PlaylistId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Playlist] PRIMARY KEY  ([PlaylistId])\\r\\n)', 'CREATE TABLE [PlaylistTrack]\\r\\n(\\r\\n    [PlaylistId] INTEGER  NOT NULL,\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_PlaylistTrack] PRIMARY KEY  ([PlaylistId], [TrackId]),\\r\\n    FOREIGN KEY ([PlaylistId]) REFERENCES [Playlist] ([PlaylistId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Track]\\r\\n(\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(200)  NOT NULL,\\r\\n    [AlbumId] INTEGER,\\r\\n    [MediaTypeId] INTEGER  NOT NULL,\\r\\n    [GenreId] INTEGER,\\r\\n    [Composer] NVARCHAR(220),\\r\\n    [Milliseconds] INTEGER  NOT NULL,\\r\\n    [Bytes] INTEGER,\\r\\n    [UnitPrice] NUMERIC(10,2)  NOT NULL,\\r\\n    CONSTRAINT [PK_Track] PRIMARY KEY  ([TrackId]),\\r\\n    FOREIGN KEY ([AlbumId]) REFERENCES [Album] ([AlbumId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([GenreId]) REFERENCES [Genre] ([GenreId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([MediaTypeId]) REFERENCES [MediaType] ([MediaTypeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)'], Based on the provided database schema information, Find all employees who are not managers.\n ### SQL:\n ```sql\n SELECT e.LastName, e.FirstName\n FROM Employee e\n WHERE e.Title <> 'Manager'\n ORDER BY e.LastName, e.FirstName;\n```\nThis query selects the last name and first name of all employees whose title is not 'Manager'. The results are ordered by last name and then by first name.",
        "clean_sql_extracted": "SELECT e.LastName, e.FirstName FROM Employee e WHERE e.Title <> 'Manager' ORDER BY e.LastName, e.FirstName;"
    },
    {
        "db_id": "chinook",
        "natural_language_question": "Get the total duration in minutes of all tracks.",
        "gold_sql": "SELECT SUM(Milliseconds)/60000.0 FROM Track;",
        "raw_model_output": "Database Schema ['CREATE TABLE [Album]\\r\\n(\\r\\n    [AlbumId] INTEGER  NOT NULL,\\r\\n    [Title] NVARCHAR(160)  NOT NULL,\\r\\n    [ArtistId] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_Album] PRIMARY KEY  ([AlbumId]),\\r\\n    FOREIGN KEY ([ArtistId]) REFERENCES [Artist] ([ArtistId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Artist]\\r\\n(\\r\\n    [ArtistId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Artist] PRIMARY KEY  ([ArtistId])\\r\\n)', 'CREATE TABLE [Customer]\\r\\n(\\r\\n    [CustomerId] INTEGER  NOT NULL,\\r\\n    [FirstName] NVARCHAR(40)  NOT NULL,\\r\\n    [LastName] NVARCHAR(20)  NOT NULL,\\r\\n    [Company] NVARCHAR(80),\\r\\n    [Address] NVARCHAR(70),\\r\\n    [City] NVARCHAR(40),\\r\\n    [State] NVARCHAR(40),\\r\\n    [Country] NVARCHAR(40),\\r\\n    [PostalCode] NVARCHAR(10),\\r\\n    [Phone] NVARCHAR(24),\\r\\n    [Fax] NVARCHAR(24),\\r\\n    [Email] NVARCHAR(60)  NOT NULL,\\r\\n    [SupportRepId] INTEGER,\\r\\n    CONSTRAINT [PK_Customer] PRIMARY KEY  ([CustomerId]),\\r\\n    FOREIGN KEY ([SupportRepId]) REFERENCES [Employee] ([EmployeeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Employee]\\r\\n(\\r\\n    [EmployeeId] INTEGER  NOT NULL,\\r\\n    [LastName] NVARCHAR(20)  NOT NULL,\\r\\n    [FirstName] NVARCHAR(20)  NOT NULL,\\r\\n    [Title] NVARCHAR(30),\\r\\n    [ReportsTo] INTEGER,\\r\\n    [BirthDate] DATETIME,\\r\\n    [HireDate] DATETIME,\\r\\n    [Address] NVARCHAR(70),\\r\\n    [City] NVARCHAR(40),\\r\\n    [State] NVARCHAR(40),\\r\\n    [Country] NVARCHAR(40),\\r\\n    [PostalCode] NVARCHAR(10),\\r\\n    [Phone] NVARCHAR(24),\\r\\n    [Fax] NVARCHAR(24),\\r\\n    [Email] NVARCHAR(60),\\r\\n    CONSTRAINT [PK_Employee] PRIMARY KEY  ([EmployeeId]),\\r\\n    FOREIGN KEY ([ReportsTo]) REFERENCES [Employee] ([EmployeeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Genre]\\r\\n(\\r\\n    [GenreId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Genre] PRIMARY KEY  ([GenreId])\\r\\n)', 'CREATE TABLE [Invoice]\\r\\n(\\r\\n    [InvoiceId] INTEGER  NOT NULL,\\r\\n    [CustomerId] INTEGER  NOT NULL,\\r\\n    [InvoiceDate] DATETIME  NOT NULL,\\r\\n    [BillingAddress] NVARCHAR(70),\\r\\n    [BillingCity] NVARCHAR(40),\\r\\n    [BillingState] NVARCHAR(40),\\r\\n    [BillingCountry] NVARCHAR(40),\\r\\n    [BillingPostalCode] NVARCHAR(10),\\r\\n    [Total] NUMERIC(10,2)  NOT NULL,\\r\\n    CONSTRAINT [PK_Invoice] PRIMARY KEY  ([InvoiceId]),\\r\\n    FOREIGN KEY ([CustomerId]) REFERENCES [Customer] ([CustomerId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [InvoiceLine]\\r\\n(\\r\\n    [InvoiceLineId] INTEGER  NOT NULL,\\r\\n    [InvoiceId] INTEGER  NOT NULL,\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    [UnitPrice] NUMERIC(10,2)  NOT NULL,\\r\\n    [Quantity] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_InvoiceLine] PRIMARY KEY  ([InvoiceLineId]),\\r\\n    FOREIGN KEY ([InvoiceId]) REFERENCES [Invoice] ([InvoiceId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [MediaType]\\r\\n(\\r\\n    [MediaTypeId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_MediaType] PRIMARY KEY  ([MediaTypeId])\\r\\n)', 'CREATE TABLE [Playlist]\\r\\n(\\r\\n    [PlaylistId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Playlist] PRIMARY KEY  ([PlaylistId])\\r\\n)', 'CREATE TABLE [PlaylistTrack]\\r\\n(\\r\\n    [PlaylistId] INTEGER  NOT NULL,\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_PlaylistTrack] PRIMARY KEY  ([PlaylistId], [TrackId]),\\r\\n    FOREIGN KEY ([PlaylistId]) REFERENCES [Playlist] ([PlaylistId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Track]\\r\\n(\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(200)  NOT NULL,\\r\\n    [AlbumId] INTEGER,\\r\\n    [MediaTypeId] INTEGER  NOT NULL,\\r\\n    [GenreId] INTEGER,\\r\\n    [Composer] NVARCHAR(220),\\r\\n    [Milliseconds] INTEGER  NOT NULL,\\r\\n    [Bytes] INTEGER,\\r\\n    [UnitPrice] NUMERIC(10,2)  NOT NULL,\\r\\n    CONSTRAINT [PK_Track] PRIMARY KEY  ([TrackId]),\\r\\n    FOREIGN KEY ([AlbumId]) REFERENCES [Album] ([AlbumId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([GenreId]) REFERENCES [Genre] ([GenreId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([MediaTypeId]) REFERENCES [MediaType] ([MediaTypeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)'], Based on the provided database schema information, Get the total duration in minutes of all tracks.\n ### SQL:\n ```sql\n SELECT SUM(CAST(CAST(Milliseconds AS FLOAT)/8640.0 AS INT) AS INT) AS TotalMinutes\n FROM Track;\n```\nThis query calculates the total duration in minutes of all tracks by converting the milliseconds to minutes and then summing up the results. The `CAST` function is used to convert the milliseconds to a float, and then to an integer to get the total minutes. The result is returned as an integer using the `AS` keyword.",
        "clean_sql_extracted": "SELECT SUM(CAST(CAST(Milliseconds AS FLOAT)/8640.0 AS INT) AS INT) AS TotalMinutes FROM Track;"
    },
    {
        "db_id": "chinook",
        "natural_language_question": "How many tracks are in the 'Rock' playlist?",
        "gold_sql": "SELECT COUNT(*) FROM PlaylistTrack WHERE PlaylistId = (SELECT PlaylistId FROM Playlist WHERE Name = 'Rock');",
        "raw_model_output": "Database Schema ['CREATE TABLE [Album]\\r\\n(\\r\\n    [AlbumId] INTEGER  NOT NULL,\\r\\n    [Title] NVARCHAR(160)  NOT NULL,\\r\\n    [ArtistId] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_Album] PRIMARY KEY  ([AlbumId]),\\r\\n    FOREIGN KEY ([ArtistId]) REFERENCES [Artist] ([ArtistId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Artist]\\r\\n(\\r\\n    [ArtistId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Artist] PRIMARY KEY  ([ArtistId])\\r\\n)', 'CREATE TABLE [Customer]\\r\\n(\\r\\n    [CustomerId] INTEGER  NOT NULL,\\r\\n    [FirstName] NVARCHAR(40)  NOT NULL,\\r\\n    [LastName] NVARCHAR(20)  NOT NULL,\\r\\n    [Company] NVARCHAR(80),\\r\\n    [Address] NVARCHAR(70),\\r\\n    [City] NVARCHAR(40),\\r\\n    [State] NVARCHAR(40),\\r\\n    [Country] NVARCHAR(40),\\r\\n    [PostalCode] NVARCHAR(10),\\r\\n    [Phone] NVARCHAR(24),\\r\\n    [Fax] NVARCHAR(24),\\r\\n    [Email] NVARCHAR(60)  NOT NULL,\\r\\n    [SupportRepId] INTEGER,\\r\\n    CONSTRAINT [PK_Customer] PRIMARY KEY  ([CustomerId]),\\r\\n    FOREIGN KEY ([SupportRepId]) REFERENCES [Employee] ([EmployeeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Employee]\\r\\n(\\r\\n    [EmployeeId] INTEGER  NOT NULL,\\r\\n    [LastName] NVARCHAR(20)  NOT NULL,\\r\\n    [FirstName] NVARCHAR(20)  NOT NULL,\\r\\n    [Title] NVARCHAR(30),\\r\\n    [ReportsTo] INTEGER,\\r\\n    [BirthDate] DATETIME,\\r\\n    [HireDate] DATETIME,\\r\\n    [Address] NVARCHAR(70),\\r\\n    [City] NVARCHAR(40),\\r\\n    [State] NVARCHAR(40),\\r\\n    [Country] NVARCHAR(40),\\r\\n    [PostalCode] NVARCHAR(10),\\r\\n    [Phone] NVARCHAR(24),\\r\\n    [Fax] NVARCHAR(24),\\r\\n    [Email] NVARCHAR(60),\\r\\n    CONSTRAINT [PK_Employee] PRIMARY KEY  ([EmployeeId]),\\r\\n    FOREIGN KEY ([ReportsTo]) REFERENCES [Employee] ([EmployeeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Genre]\\r\\n(\\r\\n    [GenreId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Genre] PRIMARY KEY  ([GenreId])\\r\\n)', 'CREATE TABLE [Invoice]\\r\\n(\\r\\n    [InvoiceId] INTEGER  NOT NULL,\\r\\n    [CustomerId] INTEGER  NOT NULL,\\r\\n    [InvoiceDate] DATETIME  NOT NULL,\\r\\n    [BillingAddress] NVARCHAR(70),\\r\\n    [BillingCity] NVARCHAR(40),\\r\\n    [BillingState] NVARCHAR(40),\\r\\n    [BillingCountry] NVARCHAR(40),\\r\\n    [BillingPostalCode] NVARCHAR(10),\\r\\n    [Total] NUMERIC(10,2)  NOT NULL,\\r\\n    CONSTRAINT [PK_Invoice] PRIMARY KEY  ([InvoiceId]),\\r\\n    FOREIGN KEY ([CustomerId]) REFERENCES [Customer] ([CustomerId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [InvoiceLine]\\r\\n(\\r\\n    [InvoiceLineId] INTEGER  NOT NULL,\\r\\n    [InvoiceId] INTEGER  NOT NULL,\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    [UnitPrice] NUMERIC(10,2)  NOT NULL,\\r\\n    [Quantity] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_InvoiceLine] PRIMARY KEY  ([InvoiceLineId]),\\r\\n    FOREIGN KEY ([InvoiceId]) REFERENCES [Invoice] ([InvoiceId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [MediaType]\\r\\n(\\r\\n    [MediaTypeId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_MediaType] PRIMARY KEY  ([MediaTypeId])\\r\\n)', 'CREATE TABLE [Playlist]\\r\\n(\\r\\n    [PlaylistId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Playlist] PRIMARY KEY  ([PlaylistId])\\r\\n)', 'CREATE TABLE [PlaylistTrack]\\r\\n(\\r\\n    [PlaylistId] INTEGER  NOT NULL,\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_PlaylistTrack] PRIMARY KEY  ([PlaylistId], [TrackId]),\\r\\n    FOREIGN KEY ([PlaylistId]) REFERENCES [Playlist] ([PlaylistId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Track]\\r\\n(\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(200)  NOT NULL,\\r\\n    [AlbumId] INTEGER,\\r\\n    [MediaTypeId] INTEGER  NOT NULL,\\r\\n    [GenreId] INTEGER,\\r\\n    [Composer] NVARCHAR(220),\\r\\n    [Milliseconds] INTEGER  NOT NULL,\\r\\n    [Bytes] INTEGER,\\r\\n    [UnitPrice] NUMERIC(10,2)  NOT NULL,\\r\\n    CONSTRAINT [PK_Track] PRIMARY KEY  ([TrackId]),\\r\\n    FOREIGN KEY ([AlbumId]) REFERENCES [Album] ([AlbumId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([GenreId]) REFERENCES [Genre] ([GenreId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([MediaTypeId]) REFERENCES [MediaType] ([MediaTypeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)'], Based on the provided database schema information, How many tracks are in the 'Rock' playlist?\n ### SQL:\n To find the number of tracks in the 'Rock' playlist, you need to join the `Track` and `PlaylistTrack` tables and filter the results based on the playlist name and genre. Here's the SQL query to achieve that:\n\n```sql\nSELECT COUNT(*)\nFROM Track\nINNER JOIN PlaylistTrack ON Track.TrackId = PlaylistTrack.TrackId\nINNER JOIN Playlist ON PlaylistTrack.PlaylistId = Playlist.PlaylistId\nWHERE Playlist.Name = 'Rock' AND Track.GenreId = (SELECT GenreId FROM Genre WHERE Name = 'Rock')\n```\n\nThis query uses a subquery to find the `GenreId` for the 'Rock' genre and then filters the results based on that `GenreId` and the playlist name. The `COUNT(*)` function is used to get the number of matching records.",
        "clean_sql_extracted": "SELECT COUNT(*) FROM Track INNER JOIN PlaylistTrack ON Track.TrackId = PlaylistTrack.TrackId INNER JOIN Playlist ON PlaylistTrack.PlaylistId = Playlist.PlaylistId WHERE Playlist.Name = 'Rock' AND Track.GenreId = (SELECT GenreId FROM Genre WHERE Name = 'Rock')"
    },
    {
        "db_id": "chinook",
        "natural_language_question": "Which customers have more than 2 invoices?",
        "gold_sql": "SELECT CustomerId FROM Invoice GROUP BY CustomerId HAVING COUNT(*) > 2;",
        "raw_model_output": "Database Schema ['CREATE TABLE [Album]\\r\\n(\\r\\n    [AlbumId] INTEGER  NOT NULL,\\r\\n    [Title] NVARCHAR(160)  NOT NULL,\\r\\n    [ArtistId] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_Album] PRIMARY KEY  ([AlbumId]),\\r\\n    FOREIGN KEY ([ArtistId]) REFERENCES [Artist] ([ArtistId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Artist]\\r\\n(\\r\\n    [ArtistId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Artist] PRIMARY KEY  ([ArtistId])\\r\\n)', 'CREATE TABLE [Customer]\\r\\n(\\r\\n    [CustomerId] INTEGER  NOT NULL,\\r\\n    [FirstName] NVARCHAR(40)  NOT NULL,\\r\\n    [LastName] NVARCHAR(20)  NOT NULL,\\r\\n    [Company] NVARCHAR(80),\\r\\n    [Address] NVARCHAR(70),\\r\\n    [City] NVARCHAR(40),\\r\\n    [State] NVARCHAR(40),\\r\\n    [Country] NVARCHAR(40),\\r\\n    [PostalCode] NVARCHAR(10),\\r\\n    [Phone] NVARCHAR(24),\\r\\n    [Fax] NVARCHAR(24),\\r\\n    [Email] NVARCHAR(60)  NOT NULL,\\r\\n    [SupportRepId] INTEGER,\\r\\n    CONSTRAINT [PK_Customer] PRIMARY KEY  ([CustomerId]),\\r\\n    FOREIGN KEY ([SupportRepId]) REFERENCES [Employee] ([EmployeeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Employee]\\r\\n(\\r\\n    [EmployeeId] INTEGER  NOT NULL,\\r\\n    [LastName] NVARCHAR(20)  NOT NULL,\\r\\n    [FirstName] NVARCHAR(20)  NOT NULL,\\r\\n    [Title] NVARCHAR(30),\\r\\n    [ReportsTo] INTEGER,\\r\\n    [BirthDate] DATETIME,\\r\\n    [HireDate] DATETIME,\\r\\n    [Address] NVARCHAR(70),\\r\\n    [City] NVARCHAR(40),\\r\\n    [State] NVARCHAR(40),\\r\\n    [Country] NVARCHAR(40),\\r\\n    [PostalCode] NVARCHAR(10),\\r\\n    [Phone] NVARCHAR(24),\\r\\n    [Fax] NVARCHAR(24),\\r\\n    [Email] NVARCHAR(60),\\r\\n    CONSTRAINT [PK_Employee] PRIMARY KEY  ([EmployeeId]),\\r\\n    FOREIGN KEY ([ReportsTo]) REFERENCES [Employee] ([EmployeeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Genre]\\r\\n(\\r\\n    [GenreId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Genre] PRIMARY KEY  ([GenreId])\\r\\n)', 'CREATE TABLE [Invoice]\\r\\n(\\r\\n    [InvoiceId] INTEGER  NOT NULL,\\r\\n    [CustomerId] INTEGER  NOT NULL,\\r\\n    [InvoiceDate] DATETIME  NOT NULL,\\r\\n    [BillingAddress] NVARCHAR(70),\\r\\n    [BillingCity] NVARCHAR(40),\\r\\n    [BillingState] NVARCHAR(40),\\r\\n    [BillingCountry] NVARCHAR(40),\\r\\n    [BillingPostalCode] NVARCHAR(10),\\r\\n    [Total] NUMERIC(10,2)  NOT NULL,\\r\\n    CONSTRAINT [PK_Invoice] PRIMARY KEY  ([InvoiceId]),\\r\\n    FOREIGN KEY ([CustomerId]) REFERENCES [Customer] ([CustomerId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [InvoiceLine]\\r\\n(\\r\\n    [InvoiceLineId] INTEGER  NOT NULL,\\r\\n    [InvoiceId] INTEGER  NOT NULL,\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    [UnitPrice] NUMERIC(10,2)  NOT NULL,\\r\\n    [Quantity] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_InvoiceLine] PRIMARY KEY  ([InvoiceLineId]),\\r\\n    FOREIGN KEY ([InvoiceId]) REFERENCES [Invoice] ([InvoiceId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [MediaType]\\r\\n(\\r\\n    [MediaTypeId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_MediaType] PRIMARY KEY  ([MediaTypeId])\\r\\n)', 'CREATE TABLE [Playlist]\\r\\n(\\r\\n    [PlaylistId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Playlist] PRIMARY KEY  ([PlaylistId])\\r\\n)', 'CREATE TABLE [PlaylistTrack]\\r\\n(\\r\\n    [PlaylistId] INTEGER  NOT NULL,\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_PlaylistTrack] PRIMARY KEY  ([PlaylistId], [TrackId]),\\r\\n    FOREIGN KEY ([PlaylistId]) REFERENCES [Playlist] ([PlaylistId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Track]\\r\\n(\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(200)  NOT NULL,\\r\\n    [AlbumId] INTEGER,\\r\\n    [MediaTypeId] INTEGER  NOT NULL,\\r\\n    [GenreId] INTEGER,\\r\\n    [Composer] NVARCHAR(220),\\r\\n    [Milliseconds] INTEGER  NOT NULL,\\r\\n    [Bytes] INTEGER,\\r\\n    [UnitPrice] NUMERIC(10,2)  NOT NULL,\\r\\n    CONSTRAINT [PK_Track] PRIMARY KEY  ([TrackId]),\\r\\n    FOREIGN KEY ([AlbumId]) REFERENCES [Album] ([AlbumId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([GenreId]) REFERENCES [Genre] ([GenreId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([MediaTypeId]) REFERENCES [MediaType] ([MediaTypeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)'], Based on the provided database schema information, Which customers have more than 2 invoices?\n ### SQL:\n ```sql\n SELECT Customer.CustomerName\n FROM Customer\n INNER JOIN Invoice ON Customer.CustomerId = Invoice.CustomerId\n GROUP BY Customer.CustomerId, Customer.CustomerName\n HAVING COUNT(Invoice.InvoiceId) > 2\n```\nThis SQL query will return the names of customers who have more than 2 invoices. The query uses an inner join to combine the Customer and Invoice tables based on the CustomerId field. The query then groups the results by CustomerId and CustomerName using the GROUP BY clause. Finally, the query uses the HAVING clause to filter the results to only include customers with more than 2 invoices.",
        "clean_sql_extracted": "SELECT Customer.CustomerName FROM Customer INNER JOIN Invoice ON Customer.CustomerId = Invoice.CustomerId GROUP BY Customer.CustomerId, Customer.CustomerName HAVING COUNT(Invoice.InvoiceId) > 2"
    },
    {
        "db_id": "chinook",
        "natural_language_question": "List all albums with more than 15 tracks.",
        "gold_sql": "SELECT AlbumId FROM Track GROUP BY AlbumId HAVING COUNT(*) > 15;",
        "raw_model_output": "Database Schema ['CREATE TABLE [Album]\\r\\n(\\r\\n    [AlbumId] INTEGER  NOT NULL,\\r\\n    [Title] NVARCHAR(160)  NOT NULL,\\r\\n    [ArtistId] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_Album] PRIMARY KEY  ([AlbumId]),\\r\\n    FOREIGN KEY ([ArtistId]) REFERENCES [Artist] ([ArtistId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Artist]\\r\\n(\\r\\n    [ArtistId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Artist] PRIMARY KEY  ([ArtistId])\\r\\n)', 'CREATE TABLE [Customer]\\r\\n(\\r\\n    [CustomerId] INTEGER  NOT NULL,\\r\\n    [FirstName] NVARCHAR(40)  NOT NULL,\\r\\n    [LastName] NVARCHAR(20)  NOT NULL,\\r\\n    [Company] NVARCHAR(80),\\r\\n    [Address] NVARCHAR(70),\\r\\n    [City] NVARCHAR(40),\\r\\n    [State] NVARCHAR(40),\\r\\n    [Country] NVARCHAR(40),\\r\\n    [PostalCode] NVARCHAR(10),\\r\\n    [Phone] NVARCHAR(24),\\r\\n    [Fax] NVARCHAR(24),\\r\\n    [Email] NVARCHAR(60)  NOT NULL,\\r\\n    [SupportRepId] INTEGER,\\r\\n    CONSTRAINT [PK_Customer] PRIMARY KEY  ([CustomerId]),\\r\\n    FOREIGN KEY ([SupportRepId]) REFERENCES [Employee] ([EmployeeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Employee]\\r\\n(\\r\\n    [EmployeeId] INTEGER  NOT NULL,\\r\\n    [LastName] NVARCHAR(20)  NOT NULL,\\r\\n    [FirstName] NVARCHAR(20)  NOT NULL,\\r\\n    [Title] NVARCHAR(30),\\r\\n    [ReportsTo] INTEGER,\\r\\n    [BirthDate] DATETIME,\\r\\n    [HireDate] DATETIME,\\r\\n    [Address] NVARCHAR(70),\\r\\n    [City] NVARCHAR(40),\\r\\n    [State] NVARCHAR(40),\\r\\n    [Country] NVARCHAR(40),\\r\\n    [PostalCode] NVARCHAR(10),\\r\\n    [Phone] NVARCHAR(24),\\r\\n    [Fax] NVARCHAR(24),\\r\\n    [Email] NVARCHAR(60),\\r\\n    CONSTRAINT [PK_Employee] PRIMARY KEY  ([EmployeeId]),\\r\\n    FOREIGN KEY ([ReportsTo]) REFERENCES [Employee] ([EmployeeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Genre]\\r\\n(\\r\\n    [GenreId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Genre] PRIMARY KEY  ([GenreId])\\r\\n)', 'CREATE TABLE [Invoice]\\r\\n(\\r\\n    [InvoiceId] INTEGER  NOT NULL,\\r\\n    [CustomerId] INTEGER  NOT NULL,\\r\\n    [InvoiceDate] DATETIME  NOT NULL,\\r\\n    [BillingAddress] NVARCHAR(70),\\r\\n    [BillingCity] NVARCHAR(40),\\r\\n    [BillingState] NVARCHAR(40),\\r\\n    [BillingCountry] NVARCHAR(40),\\r\\n    [BillingPostalCode] NVARCHAR(10),\\r\\n    [Total] NUMERIC(10,2)  NOT NULL,\\r\\n    CONSTRAINT [PK_Invoice] PRIMARY KEY  ([InvoiceId]),\\r\\n    FOREIGN KEY ([CustomerId]) REFERENCES [Customer] ([CustomerId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [InvoiceLine]\\r\\n(\\r\\n    [InvoiceLineId] INTEGER  NOT NULL,\\r\\n    [InvoiceId] INTEGER  NOT NULL,\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    [UnitPrice] NUMERIC(10,2)  NOT NULL,\\r\\n    [Quantity] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_InvoiceLine] PRIMARY KEY  ([InvoiceLineId]),\\r\\n    FOREIGN KEY ([InvoiceId]) REFERENCES [Invoice] ([InvoiceId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [MediaType]\\r\\n(\\r\\n    [MediaTypeId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_MediaType] PRIMARY KEY  ([MediaTypeId])\\r\\n)', 'CREATE TABLE [Playlist]\\r\\n(\\r\\n    [PlaylistId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Playlist] PRIMARY KEY  ([PlaylistId])\\r\\n)', 'CREATE TABLE [PlaylistTrack]\\r\\n(\\r\\n    [PlaylistId] INTEGER  NOT NULL,\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_PlaylistTrack] PRIMARY KEY  ([PlaylistId], [TrackId]),\\r\\n    FOREIGN KEY ([PlaylistId]) REFERENCES [Playlist] ([PlaylistId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Track]\\r\\n(\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(200)  NOT NULL,\\r\\n    [AlbumId] INTEGER,\\r\\n    [MediaTypeId] INTEGER  NOT NULL,\\r\\n    [GenreId] INTEGER,\\r\\n    [Composer] NVARCHAR(220),\\r\\n    [Milliseconds] INTEGER  NOT NULL,\\r\\n    [Bytes] INTEGER,\\r\\n    [UnitPrice] NUMERIC(10,2)  NOT NULL,\\r\\n    CONSTRAINT [PK_Track] PRIMARY KEY  ([TrackId]),\\r\\n    FOREIGN KEY ([AlbumId]) REFERENCES [Album] ([AlbumId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([GenreId]) REFERENCES [Genre] ([GenreId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([MediaTypeId]) REFERENCES [MediaType] ([MediaTypeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)'], Based on the provided database schema information, List all albums with more than 15 tracks.\n ### SQL:\n ```sql\n SELECT Title FROM Album\n WHERE AlbumId IN (\n    SELECT AlbumId FROM Track\n    GROUP BY AlbumId\n    HAVING COUNT(*) > 15\n )\n```\nThis SQL query selects the titles of albums that have more than 15 tracks by joining the `Album` and `Track` tables and filtering the results based on the count of tracks per album.",
        "clean_sql_extracted": "SELECT Title FROM Album WHERE AlbumId IN ( SELECT AlbumId FROM Track GROUP BY AlbumId HAVING COUNT(*) > 15 )"
    },
    {
        "db_id": "chinook",
        "natural_language_question": "Find customers who live in cities starting with 'L'.",
        "gold_sql": "SELECT FirstName, LastName FROM Customer WHERE City LIKE 'L%';",
        "raw_model_output": "Database Schema ['CREATE TABLE [Album]\\r\\n(\\r\\n    [AlbumId] INTEGER  NOT NULL,\\r\\n    [Title] NVARCHAR(160)  NOT NULL,\\r\\n    [ArtistId] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_Album] PRIMARY KEY  ([AlbumId]),\\r\\n    FOREIGN KEY ([ArtistId]) REFERENCES [Artist] ([ArtistId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Artist]\\r\\n(\\r\\n    [ArtistId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Artist] PRIMARY KEY  ([ArtistId])\\r\\n)', 'CREATE TABLE [Customer]\\r\\n(\\r\\n    [CustomerId] INTEGER  NOT NULL,\\r\\n    [FirstName] NVARCHAR(40)  NOT NULL,\\r\\n    [LastName] NVARCHAR(20)  NOT NULL,\\r\\n    [Company] NVARCHAR(80),\\r\\n    [Address] NVARCHAR(70),\\r\\n    [City] NVARCHAR(40),\\r\\n    [State] NVARCHAR(40),\\r\\n    [Country] NVARCHAR(40),\\r\\n    [PostalCode] NVARCHAR(10),\\r\\n    [Phone] NVARCHAR(24),\\r\\n    [Fax] NVARCHAR(24),\\r\\n    [Email] NVARCHAR(60)  NOT NULL,\\r\\n    [SupportRepId] INTEGER,\\r\\n    CONSTRAINT [PK_Customer] PRIMARY KEY  ([CustomerId]),\\r\\n    FOREIGN KEY ([SupportRepId]) REFERENCES [Employee] ([EmployeeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Employee]\\r\\n(\\r\\n    [EmployeeId] INTEGER  NOT NULL,\\r\\n    [LastName] NVARCHAR(20)  NOT NULL,\\r\\n    [FirstName] NVARCHAR(20)  NOT NULL,\\r\\n    [Title] NVARCHAR(30),\\r\\n    [ReportsTo] INTEGER,\\r\\n    [BirthDate] DATETIME,\\r\\n    [HireDate] DATETIME,\\r\\n    [Address] NVARCHAR(70),\\r\\n    [City] NVARCHAR(40),\\r\\n    [State] NVARCHAR(40),\\r\\n    [Country] NVARCHAR(40),\\r\\n    [PostalCode] NVARCHAR(10),\\r\\n    [Phone] NVARCHAR(24),\\r\\n    [Fax] NVARCHAR(24),\\r\\n    [Email] NVARCHAR(60),\\r\\n    CONSTRAINT [PK_Employee] PRIMARY KEY  ([EmployeeId]),\\r\\n    FOREIGN KEY ([ReportsTo]) REFERENCES [Employee] ([EmployeeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Genre]\\r\\n(\\r\\n    [GenreId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Genre] PRIMARY KEY  ([GenreId])\\r\\n)', 'CREATE TABLE [Invoice]\\r\\n(\\r\\n    [InvoiceId] INTEGER  NOT NULL,\\r\\n    [CustomerId] INTEGER  NOT NULL,\\r\\n    [InvoiceDate] DATETIME  NOT NULL,\\r\\n    [BillingAddress] NVARCHAR(70),\\r\\n    [BillingCity] NVARCHAR(40),\\r\\n    [BillingState] NVARCHAR(40),\\r\\n    [BillingCountry] NVARCHAR(40),\\r\\n    [BillingPostalCode] NVARCHAR(10),\\r\\n    [Total] NUMERIC(10,2)  NOT NULL,\\r\\n    CONSTRAINT [PK_Invoice] PRIMARY KEY  ([InvoiceId]),\\r\\n    FOREIGN KEY ([CustomerId]) REFERENCES [Customer] ([CustomerId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [InvoiceLine]\\r\\n(\\r\\n    [InvoiceLineId] INTEGER  NOT NULL,\\r\\n    [InvoiceId] INTEGER  NOT NULL,\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    [UnitPrice] NUMERIC(10,2)  NOT NULL,\\r\\n    [Quantity] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_InvoiceLine] PRIMARY KEY  ([InvoiceLineId]),\\r\\n    FOREIGN KEY ([InvoiceId]) REFERENCES [Invoice] ([InvoiceId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [MediaType]\\r\\n(\\r\\n    [MediaTypeId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_MediaType] PRIMARY KEY  ([MediaTypeId])\\r\\n)', 'CREATE TABLE [Playlist]\\r\\n(\\r\\n    [PlaylistId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(120),\\r\\n    CONSTRAINT [PK_Playlist] PRIMARY KEY  ([PlaylistId])\\r\\n)', 'CREATE TABLE [PlaylistTrack]\\r\\n(\\r\\n    [PlaylistId] INTEGER  NOT NULL,\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    CONSTRAINT [PK_PlaylistTrack] PRIMARY KEY  ([PlaylistId], [TrackId]),\\r\\n    FOREIGN KEY ([PlaylistId]) REFERENCES [Playlist] ([PlaylistId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)', 'CREATE TABLE [Track]\\r\\n(\\r\\n    [TrackId] INTEGER  NOT NULL,\\r\\n    [Name] NVARCHAR(200)  NOT NULL,\\r\\n    [AlbumId] INTEGER,\\r\\n    [MediaTypeId] INTEGER  NOT NULL,\\r\\n    [GenreId] INTEGER,\\r\\n    [Composer] NVARCHAR(220),\\r\\n    [Milliseconds] INTEGER  NOT NULL,\\r\\n    [Bytes] INTEGER,\\r\\n    [UnitPrice] NUMERIC(10,2)  NOT NULL,\\r\\n    CONSTRAINT [PK_Track] PRIMARY KEY  ([TrackId]),\\r\\n    FOREIGN KEY ([AlbumId]) REFERENCES [Album] ([AlbumId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([GenreId]) REFERENCES [Genre] ([GenreId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION,\\r\\n    FOREIGN KEY ([MediaTypeId]) REFERENCES [MediaType] ([MediaTypeId]) \\r\\n\\t\\tON DELETE NO ACTION ON UPDATE NO ACTION\\r\\n)'], Based on the provided database schema information, Find customers who live in cities starting with 'L'.\n ### SQL:\n ```sql\n SELECT * FROM Customer\n WHERE City LIKE 'L%'\n```\nThis SQL query will return all the columns and rows of the `Customer` table where the `City` column value starts with the letter 'L'. The `%` symbol is a wildcard character that matches any sequence of characters. In this case, it matches any sequence of characters after the letter 'L'.",
        "clean_sql_extracted": "SELECT * FROM Customer WHERE City LIKE 'L%'"
    }
]