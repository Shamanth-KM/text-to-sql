[
    {
        "question": "What are the names of all albums by AC/DC?",
        "generated_sql": "select album.name from album join artist on album.artistid = artist.artistid where artist.name = 'ac/dc';",
        "gold_sql": "select title from album join artist on album.artistid = artist.artistid where artist.name = 'ac/dc';",
        "exact_match": false,
        "execution_match": false
    },
    {
        "question": "Which customers are from Brazil?",
        "generated_sql": "select firstname, lastname from customer where country = 'brazil';",
        "gold_sql": "select firstname, lastname from customer where country = 'brazil';",
        "exact_match": true,
        "execution_match": true
    },
    {
        "question": "List the top 5 most purchased tracks.",
        "generated_sql": "select track.name, count(*) as purchases from invoiceline join track on invoiceline.trackid = track.trackid group by track.name order by purchases desc limit 5;",
        "gold_sql": "select track.name, count(*) as purchases from invoiceline join track on invoiceline.trackid = track.trackid group by track.name order by purchases desc limit 5;",
        "exact_match": true,
        "execution_match": true
    },
    {
        "question": "How many invoices were created in the year 2012?",
        "generated_sql": "select count(*) from invoice where invoicedate like '2012%';",
        "gold_sql": "select count(*) from invoice where invoicedate like '2012%';",
        "exact_match": true,
        "execution_match": true
    },
    {
        "question": "Which employees are sales agents?",
        "generated_sql": "select firstname, lastname from employee where title = 'sales agent';",
        "gold_sql": "select firstname, lastname from employee where title = 'sales support agent';",
        "exact_match": false,
        "execution_match": true
    },
    {
        "question": "Show the total sales per country.",
        "generated_sql": "select country, sum(total) as totalsales from invoice group by country;",
        "gold_sql": "select billingcountry, sum(total) as totalsales from invoice group by billingcountry order by totalsales desc;",
        "exact_match": false,
        "execution_match": false
    },
    {
        "question": "List all unique genres in the database.",
        "generated_sql": "select distinct genre from track;",
        "gold_sql": "select distinct name from genre;",
        "exact_match": false,
        "execution_match": false
    },
    {
        "question": "Find the names and emails of customers who have made purchases over $20.",
        "generated_sql": "select firstname, email from customer join invoice on customer.customerid = invoice.customerid group by customer.customerid having sum(invoice.total) > 20;",
        "gold_sql": "select distinct customer.firstname, customer.lastname, customer.email from customer join invoice on customer.customerid = invoice.customerid where invoice.total > 20;",
        "exact_match": false,
        "execution_match": false
    },
    {
        "question": "Which employee reports to Andrew Adams?",
        "generated_sql": "select firstname, lastname from employee where reportsto = (select employeeid from employee where firstname = 'andrew' and lastname = 'adams');",
        "gold_sql": "select firstname, lastname from employee where reportsto = (select employeeid from employee where firstname = 'andrew' and lastname = 'adams');",
        "exact_match": true,
        "execution_match": true
    },
    {
        "question": "How many different cities are our customers from?",
        "generated_sql": "select count(distinct city) from customer;",
        "gold_sql": "select count(distinct city) from customer;",
        "exact_match": true,
        "execution_match": true
    },
    {
        "question": "Which customer made the highest invoice total?",
        "generated_sql": "select customer.firstname, customer.lastname, sum(invoice.total) as total from invoice join customer on invoice.customerid = customer.customerid group by customer.customerid order by total desc limit 1;",
        "gold_sql": "select customer.firstname, customer.lastname, max(invoice.total) from customer join invoice on customer.customerid = invoice.customerid;",
        "exact_match": false,
        "execution_match": false
    },
    {
        "question": "Show the number of invoices per customer.",
        "generated_sql": "select customer.firstname, customer.lastname, count(*) as invoicecount from invoice join customer on invoice.customerid = customer.customerid group by customer.firstname, customer.lastname;",
        "gold_sql": "select customerid, count(*) as invoicecount from invoice group by customerid;",
        "exact_match": false,
        "execution_match": false
    },
    {
        "question": "List employees who are managers.",
        "generated_sql": "select firstname, lastname from employee where title = 'support engineer';",
        "gold_sql": "select firstname, lastname from employee where title like '%manager%';",
        "exact_match": false,
        "execution_match": false
    },
    {
        "question": "Which invoices were billed to customers in Canada?",
        "generated_sql": "select invoice.invoiceid, customer.country from invoice join customer on invoice.customerid = customer.customerid where customer.country = 'canada';",
        "gold_sql": "select invoiceid, billingcity from invoice where billingcountry = 'canada';",
        "exact_match": false,
        "execution_match": true
    },
    {
        "question": "Which customers live in cities that start with 'P'?",
        "generated_sql": "select firstname, lastname from customer where city like 'p%';",
        "gold_sql": "select firstname, lastname, city from customer where city like 'p%';",
        "exact_match": false,
        "execution_match": false
    },
    {
        "question": "What is the total sales value for each billing city?",
        "generated_sql": "select billingcity, sum(total) from invoice group by billingcity;",
        "gold_sql": "select billingcity, sum(total) from invoice group by billingcity;",
        "exact_match": true,
        "execution_match": true
    },
    {
        "question": "Find the most common billing country.",
        "generated_sql": "select billingcountry, count(*) as count from invoice group by billingcountry order by count desc limit 1;",
        "gold_sql": "select billingcountry, count(*) as invoicecount from invoice group by billingcountry order by invoicecount desc limit 1;",
        "exact_match": false,
        "execution_match": true
    },
    {
        "question": "Show the customers who have not made any purchases.",
        "generated_sql": "select firstname, lastname from customer where not exists (select * from invoice where customer.customerid = invoice.customerid);",
        "gold_sql": "select firstname, lastname from customer where customerid not in (select customerid from invoice);",
        "exact_match": false,
        "execution_match": true
    },
    {
        "question": "Which tracks are longer than 5 minutes?",
        "generated_sql": "select name from track where milliseconds > 300000;",
        "gold_sql": "select name from track where milliseconds > 300000;",
        "exact_match": true,
        "execution_match": true
    },
    {
        "question": "How many invoices have a total between $10 and $15?",
        "generated_sql": "select count(*) from invoice where total between 10 and 15;",
        "gold_sql": "select count(*) from invoice where total between 10 and 15;",
        "exact_match": true,
        "execution_match": true
    },
    {
        "question": "List the email addresses of customers who live in Paris.",
        "generated_sql": "select email from customer where city = 'paris';",
        "gold_sql": "select email from customer where city = 'paris';",
        "exact_match": true,
        "execution_match": true
    },
    {
        "question": "Find all customers whose last name starts with 'S'.",
        "generated_sql": "select firstname, lastname from customer where lastname like 's%';",
        "gold_sql": "select firstname, lastname from customer where lastname like 's%';",
        "exact_match": true,
        "execution_match": true
    },
    {
        "question": "List all albums with more than 10 tracks.",
        "generated_sql": "select album.title from album join track on album.albumid = track.albumid group by album.title having count(*) > 10;",
        "gold_sql": "select album.title from album join track on album.albumid = track.albumid group by album.title having count(track.trackid) > 10;",
        "exact_match": false,
        "execution_match": true
    },
    {
        "question": "Get the top 3 countries by number of customers.",
        "generated_sql": "select country, count(*) as customercount from customer group by country order by customercount desc limit 3;",
        "gold_sql": "select country, count(*) as count from customer group by country order by count desc limit 3;",
        "exact_match": false,
        "execution_match": true
    },
    {
        "question": "Show the artist names who have more than 5 albums.",
        "generated_sql": "select artist.name from artist join album on artist.artistid = album.artistid group by artist.name having count(*) > 5;",
        "gold_sql": "select artist.name from artist join album on artist.artistid = album.artistid group by artist.name having count(album.albumid) > 5;",
        "exact_match": false,
        "execution_match": true
    },
    {
        "question": "How many employees do we have per city?",
        "generated_sql": "select city, count(*) as employeecount from employee group by city;",
        "gold_sql": "select city, count(*) as employeecount from employee group by city;",
        "exact_match": true,
        "execution_match": true
    },
    {
        "question": "Which customers are from Germany and have a Gmail email address?",
        "generated_sql": "select firstname, lastname from customer where country = 'germany' and email like '%@gmail.com';",
        "gold_sql": "select firstname, lastname from customer where country = 'germany' and email like '%@gmail.com';",
        "exact_match": true,
        "execution_match": true
    },
    {
        "question": "What are the names of all tracks in the 'Rock' genre?",
        "generated_sql": "select name from track join genre on track.genreid = genre.genreid where genre.name = 'rock';",
        "gold_sql": "select track.name from track join genre on track.genreid = genre.genreid where genre.name = 'rock';",
        "exact_match": false,
        "execution_match": false
    },
    {
        "question": "Find tracks that cost more than $0.99.",
        "generated_sql": "select name from track where unitprice > 0.99;",
        "gold_sql": "select name, unitprice from track where unitprice > 0.99;",
        "exact_match": false,
        "execution_match": false
    },
    {
        "question": "List the number of tracks per album.",
        "generated_sql": "select albumid, count(*) as trackcount from track group by albumid;",
        "gold_sql": "select albumid, count(*) as trackcount from track group by albumid;",
        "exact_match": true,
        "execution_match": true
    },
    {
        "question": "Show the customers who bought tracks composed by 'AC/DC'.",
        "generated_sql": "select customer.firstname, customer.lastname from customer join invoice on customer.customerid = invoice.customerid join invoiceline on invoice.invoiceid = invoiceline.invoiceid join track on invoiceline.trackid = track.trackid join artist on track.artistid = artist.artistid where artist.name = 'ac/dc';",
        "gold_sql": "select distinct customer.firstname, customer.lastname from customer join invoice on customer.customerid = invoice.customerid join invoiceline on invoice.invoiceid = invoiceline.invoiceid join track on invoiceline.trackid = track.trackid join album on track.albumid = album.albumid join artist on album.artistid = artist.artistid where artist.name = 'ac/dc';",
        "exact_match": false,
        "execution_match": false
    },
    {
        "question": "Get the average invoice total.",
        "generated_sql": "select avg(total) from invoice;",
        "gold_sql": "select avg(total) from invoice;",
        "exact_match": true,
        "execution_match": true
    },
    {
        "question": "What is the longest track in the database?",
        "generated_sql": "select name, milliseconds from track order by milliseconds desc limit 1;",
        "gold_sql": "select name from track order by milliseconds desc limit 1;",
        "exact_match": false,
        "execution_match": false
    },
    {
        "question": "List all employees who do not report to anyone.",
        "generated_sql": "select firstname, lastname from employee where reportsto is null;",
        "gold_sql": "select firstname, lastname from employee where reportsto is null;",
        "exact_match": true,
        "execution_match": true
    },
    {
        "question": "What is the total duration of all tracks in seconds?",
        "generated_sql": "select sum(milliseconds) / 1000 from track;",
        "gold_sql": "select sum(milliseconds) / 1000 as totalseconds from track;",
        "exact_match": false,
        "execution_match": true
    },
    {
        "question": "How many genres have more than 50 tracks?",
        "generated_sql": "select count(*) from genre join track on genre.genreid = track.genreid group by genre.name having count(*) > 50;",
        "gold_sql": "select count(*) from (select genreid from track group by genreid having count(*) > 50);",
        "exact_match": false,
        "execution_match": false
    },
    {
        "question": "List the customers who have made more than 3 invoices.",
        "generated_sql": "select customer.firstname, customer.lastname from customer join invoice on customer.customerid = invoice.customerid group by customer.customerid having count(*) > 3;",
        "gold_sql": "select customer.firstname, customer.lastname from customer join invoice on customer.customerid = invoice.customerid group by customer.customerid having count(invoice.invoiceid) > 3;",
        "exact_match": false,
        "execution_match": true
    },
    {
        "question": "Which tracks belong to playlists named 'Grunge'?",
        "generated_sql": "select track.name from track join playlisttrack on track.trackid = playlisttrack.trackid join playlist on playlisttrack.playlistid = playlist.playlistid where playlist.name = 'grunge';",
        "gold_sql": "select track.name from track join playlisttrack on track.trackid = playlisttrack.trackid join playlist on playlisttrack.playlistid = playlist.playlistid where playlist.name = 'grunge';",
        "exact_match": true,
        "execution_match": true
    },
    {
        "question": "Show employees who are based in Canada.",
        "generated_sql": "select firstname, lastname from employee where country = 'canada';",
        "gold_sql": "select firstname, lastname from employee where country = 'canada';",
        "exact_match": true,
        "execution_match": true
    },
    {
        "question": "List all playlists and the number of tracks in each.",
        "generated_sql": "select playlist.name, count(track.playlistid) as trackcount from playlist join track on playlist.playlistid = track.playlistid group by playlist.name;",
        "gold_sql": "select playlist.name, count(playlisttrack.trackid) as trackcount from playlist join playlisttrack on playlist.playlistid = playlisttrack.playlistid group by playlist.name;",
        "exact_match": false,
        "execution_match": false
    },
    {
        "question": "Which artist has the most albums?",
        "generated_sql": "select artist.name from artist join album on artist.artistid = album.artistid group by artist.name order by count(*) desc limit 1;",
        "gold_sql": "select artist.name from artist join album on artist.artistid = album.artistid group by artist.name order by count(album.albumid) desc limit 1;",
        "exact_match": false,
        "execution_match": true
    },
    {
        "question": "Find the most expensive track.",
        "generated_sql": "select name, unitprice from track order by unitprice desc limit 1;",
        "gold_sql": "select name, unitprice from track order by unitprice desc limit 1;",
        "exact_match": true,
        "execution_match": true
    },
    {
        "question": "What is the average price of a track?",
        "generated_sql": "select avg(unitprice) from track;",
        "gold_sql": "select avg(unitprice) from track;",
        "exact_match": true,
        "execution_match": true
    },
    {
        "question": "List invoices made in August 2011.",
        "generated_sql": "select invoiceid, customerid, invoicedate from invoice where invoicedate like '2011-08%';",
        "gold_sql": "select * from invoice where invoicedate like '2011-08%';",
        "exact_match": false,
        "execution_match": false
    },
    {
        "question": "Show all tracks that include 'love' in the name.",
        "generated_sql": "select name from track where name like '%love%';",
        "gold_sql": "select name from track where name like '%love%';",
        "exact_match": true,
        "execution_match": true
    },
    {
        "question": "How many customers are from each country?",
        "generated_sql": "select country, count(*) as customercount from customer group by country;",
        "gold_sql": "select country, count(*) from customer group by country;",
        "exact_match": false,
        "execution_match": true
    },
    {
        "question": "Find customers who live in both Paris and Berlin.",
        "generated_sql": "select firstname, lastname from customer where city = 'paris' and city = 'berlin';",
        "gold_sql": "select firstname, lastname, city from customer where city in ('paris', 'berlin');",
        "exact_match": false,
        "execution_match": true
    },
    {
        "question": "Which employees report to a manager named 'Steve'?",
        "generated_sql": "select firstname, lastname from employee where reportsto like 'steve';",
        "gold_sql": "select e.firstname, e.lastname from employee e join employee m on e.reportsto = m.employeeid where m.firstname = 'steve';",
        "exact_match": false,
        "execution_match": true
    },
    {
        "question": "Which customers have purchased tracks in the 'Jazz' genre?",
        "generated_sql": "select distinct customer.firstname, customer.lastname from customer join invoice on customer.customerid = invoice.customerid join invoiceline on invoice.invoiceid = invoiceline.invoiceid join track on invoiceline.trackid = track.trackid where track.genreid = 3;",
        "gold_sql": "select distinct customer.firstname, customer.lastname from customer join invoice on customer.customerid = invoice.customerid join invoiceline on invoice.invoiceid = invoiceline.invoiceid join track on invoiceline.trackid = track.trackid join genre on track.genreid = genre.genreid where genre.name = 'jazz';",
        "exact_match": false,
        "execution_match": false
    },
    {
        "question": "Find the country with the highest number of customers.",
        "generated_sql": "select country from customer group by country order by count(*) desc limit 1;",
        "gold_sql": "select country from customer group by country order by count(*) desc limit 1;",
        "exact_match": true,
        "execution_match": true
    },
    {
        "question": "List the invoice dates with total amount over $30.",
        "generated_sql": "select invoicedate, total from invoice where total > 30;",
        "gold_sql": "select invoicedate from invoice where total > 30;",
        "exact_match": false,
        "execution_match": true
    },
    {
        "question": "How many tracks are there in each media type?",
        "generated_sql": "select mediatypeid, count(*) as trackcount from track group by mediatypeid;",
        "gold_sql": "select mediatypeid, count(*) from track group by mediatypeid;",
        "exact_match": false,
        "execution_match": true
    },
    {
        "question": "Which genres have an average track length over 4 minutes?",
        "generated_sql": "select genre.name from genre join track on genre.genreid = track.genreid group by genre.name having avg(track.milliseconds) > 240000;",
        "gold_sql": "select genre.name from genre join track on genre.genreid = track.genreid group by genre.name having avg(track.milliseconds) > 240000;",
        "exact_match": true,
        "execution_match": true
    },
    {
        "question": "List the top 3 customers who spent the most money.",
        "generated_sql": "select customer.firstname, customer.lastname, sum(invoice.total) as totalspent from invoice join customer on invoice.customerid = customer.customerid group by customer.customerid order by totalspent desc limit 3;",
        "gold_sql": "select customer.firstname, customer.lastname, sum(invoice.total) as totalspent from customer join invoice on customer.customerid = invoice.customerid group by customer.customerid order by totalspent desc limit 3;",
        "exact_match": false,
        "execution_match": true
    },
    {
        "question": "Which artists have more than 20 tracks in the database?",
        "generated_sql": "select artist.name from artist join track on artist.artistid = track.artistid group by artist.name having count(*) > 20;",
        "gold_sql": "select artist.name from artist join album on artist.artistid = album.artistid join track on album.albumid = track.albumid group by artist.name having count(track.trackid) > 20;",
        "exact_match": false,
        "execution_match": false
    },
    {
        "question": "What are the 10 most recently created invoices?",
        "generated_sql": "select * from invoice order by invoicedate desc limit 10;",
        "gold_sql": "select * from invoice order by invoicedate desc limit 10;",
        "exact_match": true,
        "execution_match": true
    },
    {
        "question": "Find tracks with names that include the word 'baby'.",
        "generated_sql": "select name from track where name like '%baby%';",
        "gold_sql": "select name from track where name like '%baby%';",
        "exact_match": true,
        "execution_match": true
    },
    {
        "question": "Which employees are located in the USA?",
        "generated_sql": "select firstname, lastname from employee where country = 'usa';",
        "gold_sql": "select firstname, lastname from employee where country = 'usa';",
        "exact_match": true,
        "execution_match": true
    },
    {
        "question": "Find playlists that have less than 10 tracks.",
        "generated_sql": "select playlistid, name from playlist where trackcount < 10;",
        "gold_sql": "select playlist.name from playlist join playlisttrack on playlist.playlistid = playlisttrack.playlistid group by playlist.name having count(playlisttrack.trackid) < 10;",
        "exact_match": false,
        "execution_match": false
    },
    {
        "question": "Which albums have tracks with the highest average unit price?",
        "generated_sql": "select album.title from album join track on album.albumid = track.albumid join invoiceline on track.trackid = invoiceline.trackid group by album.title having avg(invoiceline.unitprice) = (select avg(invoiceline.unitprice) from invoiceline join track on invoiceline.trackid = track.trackid group by track.trackid);",
        "gold_sql": "select album.title from album join track on album.albumid = track.albumid group by album.albumid order by avg(track.unitprice) desc limit 5;",
        "exact_match": false,
        "execution_match": false
    },
    {
        "question": "Get the details of the longest invoice item.",
        "generated_sql": "select * from invoiceline order by quantity desc limit 1;",
        "gold_sql": "select * from invoiceline order by quantity desc limit 1;",
        "exact_match": true,
        "execution_match": true
    },
    {
        "question": "List the tracks that are not in any playlist.",
        "generated_sql": "select track.name from track left join playlisttrack on track.trackid = playlisttrack.trackid group by track.name having count(*) = 0;",
        "gold_sql": "select name from track where trackid not in (select trackid from playlisttrack);",
        "exact_match": false,
        "execution_match": true
    },
    {
        "question": "Find customers who have more than one invoice from the same country.",
        "generated_sql": "select customer.country, count(*) as invoicecount from invoice join customer on invoice.customerid = customer.customerid group by customer.country having invoicecount > 1;",
        "gold_sql": "select customerid, count(*) as invoicecount from invoice group by customerid, billingcountry having invoicecount > 1;",
        "exact_match": false,
        "execution_match": false
    },
    {
        "question": "Which invoices were billed in cities starting with 'L'?",
        "generated_sql": "select invoiceid from invoice where billingcity like 'l%';",
        "gold_sql": "select invoiceid from invoice where billingcity like 'l%';",
        "exact_match": true,
        "execution_match": true
    },
    {
        "question": "Which genres have more than 100 tracks?",
        "generated_sql": "select genre.name from genre join track on genre.genreid = track.genreid group by genre.name having count(*) > 100;",
        "gold_sql": "select genre.name from genre join track on genre.genreid = track.genreid group by genre.genreid having count(*) > 100;",
        "exact_match": false,
        "execution_match": false
    },
    {
        "question": "Show the invoices with the lowest totals.",
        "generated_sql": "select invoiceid, customerid, total from invoice order by total limit 5;",
        "gold_sql": "select * from invoice order by total asc limit 5;",
        "exact_match": false,
        "execution_match": false
    },
    {
        "question": "List employees along with their managers\u2019 names.",
        "generated_sql": "select firstname, lastname, manager.firstname, manager.lastname from employee join employee manager on manager.employeeid = employee.reportsto;",
        "gold_sql": "select e.firstname, e.lastname, m.firstname as managerfirst, m.lastname as managerlast from employee e left join employee m on e.reportsto = m.employeeid;",
        "exact_match": false,
        "execution_match": false
    },
    {
        "question": "Get all albums that contain the word 'Greatest'.",
        "generated_sql": "select name from album where name like '%greatest%';",
        "gold_sql": "select title from album where title like '%greatest%';",
        "exact_match": false,
        "execution_match": false
    },
    {
        "question": "Which customers have purchased from more than 2 different billing cities?",
        "generated_sql": "select customer.firstname, customer.lastname from customer join invoice on customer.customerid = invoice.customerid group by customer.customerid having count(distinct invoice.billingcity) > 2;",
        "gold_sql": "select customer.firstname, customer.lastname from customer join invoice on customer.customerid = invoice.customerid group by customer.customerid having count(distinct invoice.billingcity) > 2;",
        "exact_match": true,
        "execution_match": true
    },
    {
        "question": "Find the top 3 invoice totals and the customer names.",
        "generated_sql": "select customer.firstname, customer.lastname, invoice.total from invoice join customer on invoice.customerid = customer.customerid order by invoice.total desc limit 3;",
        "gold_sql": "select customer.firstname, customer.lastname, invoice.total from invoice join customer on invoice.customerid = customer.customerid order by invoice.total desc limit 3;",
        "exact_match": true,
        "execution_match": true
    },
    {
        "question": "Which artists have albums but no tracks?",
        "generated_sql": "select artist.name from artist join album on artist.artistid = album.artistid left join track on album.albumid = track.albumid group by artist.name having count(track.trackid) = 0;",
        "gold_sql": "select artist.name from artist left join album on artist.artistid = album.artistid left join track on album.albumid = track.albumid where track.trackid is null;",
        "exact_match": false,
        "execution_match": false
    },
    {
        "question": "Show total number of invoice items per billing country.",
        "generated_sql": "select billingcountry, count(*) as invoicecount from invoice group by billingcountry;",
        "gold_sql": "select invoice.billingcountry, count(invoiceline.invoicelineid) as itemcount from invoice join invoiceline on invoice.invoiceid = invoiceline.invoiceid group by invoice.billingcountry;",
        "exact_match": false,
        "execution_match": false
    },
    {
        "question": "Which tracks appear in the most playlists?",
        "generated_sql": "select track.name, count(playlisttrack.trackid) as playlistcount from track join playlisttrack on track.trackid = playlisttrack.trackid group by track.name order by playlistcount desc limit 5;",
        "gold_sql": "select track.name, count(playlisttrack.playlistid) as playlistcount from track join playlisttrack on track.trackid = playlisttrack.trackid group by track.name order by playlistcount desc limit 5;",
        "exact_match": false,
        "execution_match": true
    },
    {
        "question": "How many customers have the same phone number prefix?",
        "generated_sql": "select left(phone, 3) as prefix, count(*) as count from customer group by prefix;",
        "gold_sql": "select substr(phone, 1, 3) as prefix, count(*) from customer group by prefix having count(*) > 1;",
        "exact_match": false,
        "execution_match": false
    },
    {
        "question": "Get the total revenue by invoice month.",
        "generated_sql": "select month(invoicedate) as month, sum(total) as totalrevenue from invoice group by month;",
        "gold_sql": "select substr(invoicedate, 1, 7) as month, sum(total) from invoice group by month order by month;",
        "exact_match": false,
        "execution_match": false
    },
    {
        "question": "Find the customers with the same support rep.",
        "generated_sql": "select customer.firstname, customer.lastname from customer join customer on customer.supportrepid = customer.supportrepid;",
        "gold_sql": "select supportrepid, count(*) as count from customer group by supportrepid having count > 1;",
        "exact_match": false,
        "execution_match": false
    },
    {
        "question": "Which employees are responsible for customers from Germany?",
        "generated_sql": "select firstname, lastname from employee join customer on employee.employeeid = customer.supportrepid where customer.country = 'germany';",
        "gold_sql": "select distinct e.firstname, e.lastname from employee e join customer c on e.employeeid = c.supportrepid where c.country = 'germany';",
        "exact_match": false,
        "execution_match": false
    },
    {
        "question": "What is the average number of tracks per playlist?",
        "generated_sql": "select avg(trackcount) from (select playlistid, count(trackid) as trackcount from playlisttrack group by playlistid);",
        "gold_sql": "select avg(trackcount) from (select playlistid, count(*) as trackcount from playlisttrack group by playlistid);",
        "exact_match": false,
        "execution_match": true
    },
    {
        "question": "Find all invoices that include exactly 3 items.",
        "generated_sql": "select invoiceid from invoiceline group by invoiceid having count(*) = 3;",
        "gold_sql": "select invoiceid from invoiceline group by invoiceid having count(*) = 3;",
        "exact_match": true,
        "execution_match": true
    },
    {
        "question": "Which countries have more than 5 customers?",
        "generated_sql": "select country from customer group by country having count(*) > 5;",
        "gold_sql": "select country from customer group by country having count(*) > 5;",
        "exact_match": true,
        "execution_match": true
    },
    {
        "question": "Which customers have an invoice average above $25?",
        "generated_sql": "select customer.firstname, customer.lastname from customer join invoice on customer.customerid = invoice.customerid group by customer.customerid having avg(invoice.total) > 25;",
        "gold_sql": "select customer.firstname, customer.lastname from customer join invoice on customer.customerid = invoice.customerid group by customer.customerid having avg(invoice.total) > 25;",
        "exact_match": true,
        "execution_match": true
    },
    {
        "question": "Which tracks have more than 2 media types?",
        "generated_sql": "select track.name from track join trackmediatype on track.trackid = trackmediatype.trackid group by track.name having count(distinct mediatype.name) > 2;",
        "gold_sql": "select track.name from track group by track.name having count(distinct mediatypeid) > 2;",
        "exact_match": false,
        "execution_match": false
    },
    {
        "question": "Find customers with first names that end in 'a'.",
        "generated_sql": "select firstname from customer where firstname like '%a';",
        "gold_sql": "select firstname, lastname from customer where firstname like '%a';",
        "exact_match": false,
        "execution_match": false
    },
    {
        "question": "Which artists have albums with no associated tracks?",
        "generated_sql": "select artist.name from artist join album on artist.artistid = album.artistid left join track on album.albumid = track.albumid group by artist.name having count(track.trackid) = 0;",
        "gold_sql": "select distinct artist.name from artist join album on artist.artistid = album.artistid left join track on album.albumid = track.albumid where track.trackid is null;",
        "exact_match": false,
        "execution_match": true
    },
    {
        "question": "Show tracks that were purchased more than 10 times.",
        "generated_sql": "select track.name from invoiceline join track on invoiceline.trackid = track.trackid group by track.name having count(*) > 10;",
        "gold_sql": "select track.name from invoiceline join track on invoiceline.trackid = track.trackid group by track.trackid having count(*) > 10;",
        "exact_match": false,
        "execution_match": true
    },
    {
        "question": "Which invoices have more than $40 in total and less than 5 items?",
        "generated_sql": "select invoiceid from invoice where total > 40 and invoicelinecount < 5;",
        "gold_sql": "select invoice.invoiceid from invoice join invoiceline on invoice.invoiceid = invoiceline.invoiceid group by invoice.invoiceid having sum(invoice.total) > 40 and count(invoiceline.invoicelineid) < 5;",
        "exact_match": false,
        "execution_match": false
    },
    {
        "question": "Find the number of albums per artist.",
        "generated_sql": "select artist.name, count(*) as albumcount from album join artist on album.artistid = artist.artistid group by artist.name;",
        "gold_sql": "select artist.name, count(album.albumid) as albumcount from artist join album on artist.artistid = album.artistid group by artist.artistid;",
        "exact_match": false,
        "execution_match": false
    },
    {
        "question": "List all customers who purchased Jazz tracks and live in Canada.",
        "generated_sql": "select firstname, lastname from customer join invoice on customer.customerid = invoice.customerid join invoiceline on invoice.invoiceid = invoiceline.invoiceid join track on invoiceline.trackid = track.trackid where track.genre = 'jazz' and customer.country = 'canada';",
        "gold_sql": "select distinct customer.firstname, customer.lastname from customer join invoice on customer.customerid = invoice.customerid join invoiceline on invoice.invoiceid = invoiceline.invoiceid join track on invoiceline.trackid = track.trackid join genre on track.genreid = genre.genreid where genre.name = 'jazz' and customer.country = 'canada';",
        "exact_match": false,
        "execution_match": false
    }
]